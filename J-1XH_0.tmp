<?xml version="1.0" encoding="utf-8" ?>
<Expression_Builder>
	<!-- There can be multiple type nodes.  Each describes an expression builder dialog. -->
	<!-- the name attribute is used to name this expression builder.  Expects: string -->
	<ExprBuilderType name="Standard">
		<!-- the name attribute is used to name this button.  Expects: string -->
		<!-- the wrap attribute is used to indicate whether the item to insert,
				when the button is pressed, should enclose the selected text.  This is 
				typical, for example, on a button with text to insert of '[]' (i.e [text]).  
				When pushed the square brackets will wrap the selected text.  When this 
				attribute is true, it is also assumed that the text to insert is at least 
				two characters in length. If wrap is false, the text is simply inserted 
				at the cursor location. Highlighted text will be replaced by the text of
				the button, not wrapped.  
				Expects: true or false -->
		<!-- the order attribute is used to indicate where this button will be placed in
				the toolbar.  Expects: integer -->
		<!-- There can be multiple button nodes.  Each describes a button object. -->
		<Button order="1">
			<Button_Prefix> AND </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> OR </Button_Postfix>
			<Button_Tip>Logical OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix> XOR </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical XOR</Button_Tip>
			<Button_Text>XOR</Button_Text>
		</Button>
		<Button order="4">
			<Button_Prefix> NOT </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="5">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<Button order="6">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> LIKE </Button_Postfix>
			<Button_Tip>LIKE</Button_Tip>
			<Button_Text>LIKE</Button_Text>
		</Button>
		<Button order="7">
			<Button_Prefix> IS </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IS</Button_Tip>
			<Button_Text>IS</Button_Text>
		</Button>
		<Button order="8">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> NULL </Button_Postfix>
			<Button_Tip>NULL</Button_Tip>
			<Button_Text>NULL</Button_Text>
		</Button>
		<Button order="9">
			<Button_Prefix> IIf </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IIf</Button_Tip>
			<Button_Text>IIf</Button_Text>
		</Button>
		<Button order="10">
			<Button_Prefix> IfNull </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IfNull</Button_Tip>
			<Button_Text>IfNull</Button_Text>
		</Button>
		<Button order="11">
			<Button_Prefix> + </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Addition</Button_Tip>
			<Button_Text>+</Button_Text>
		</Button>
		<Button order="12">
			<Button_Prefix> - </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Subtraction</Button_Tip>
			<Button_Text>-</Button_Text>
		</Button>
		<Button order="13">
			<Button_Prefix> * </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Multiplication</Button_Tip>
			<Button_Text>*</Button_Text>
		</Button>
		<Button order="14">
			<Button_Prefix> / </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Division</Button_Tip>
			<Button_Text>/</Button_Text>
		</Button>
		<!-- <Button order="15">
			<Button_Prefix> MOD </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Modulus</Button_Tip>
			<Button_Text>MOD</Button_Text>
		</Button>-->
		<Button order="16">
			<Button_Prefix> ^ </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Power</Button_Tip>
			<Button_Text>^</Button_Text>
		</Button>
		<Button order="17">
			<Button_Prefix> &lt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Less Than</Button_Tip>
			<Button_Text>&lt;</Button_Text>
		</Button>
		<Button order="18">
			<Button_Prefix> &gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Greater Than</Button_Tip>
			<Button_Text>&gt;</Button_Text>
		</Button>
		<Button order="19">
			<Button_Prefix> &lt;&gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Not Equal To</Button_Tip>
			<Button_Text>&lt;&gt;</Button_Text>
		</Button>
		<Button order="20">
			<Button_Prefix> = </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Equal To</Button_Tip>
			<Button_Text>=</Button_Text>
		</Button>		
		<!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Search Specification field. -->
		<category name="BC Fields">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business component fields</ToolTip>
			<subcategory name="All" containsFields="true">
				<ToolTip>All Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<!-- An element either has a value attribute or a set of QueryPathSteps
					 that will define it - not both. -->
				<!-- appliesTo is REQUIRED for context sensitive elements (if the 
					 subcategory is not static, i.e for those that contain queryPathSteps 
					 if their subcategory is not dynamically generated)  -->
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>				
				<element name="" appliesTo="Repository Applet">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository WF Step I/O Argument">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Workflow Process</BusinessObject>
						<BusinessComponent>Repository WF Step</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>				
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>								
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>								
				<element name="" appliesTo="Repository Applet">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository WF Step I/O Argument">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Workflow Process</BusinessObject>
						<BusinessComponent>Repository WF Step</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>				
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>								
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>															
				<element name="" appliesTo="Repository Applet">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository WF Step I/O Argument">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Workflow Process</BusinessObject>
						<BusinessComponent>Repository WF Step</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>				
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>								
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>				
				<element name="" appliesTo="Repository Applet">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository WF Step I/O Argument">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Workflow Process</BusinessObject>
						<BusinessComponent>Repository WF Step</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>				
					<QueryPathStep name="" order="2">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>								
			</subcategory>
		</category>
		<category name="Functions">
			<ToolTip>Functions for Siebel Calculated Expressions.  Can be used in Calculated Field and Validation field expressions.</ToolTip>
			<subcategory name="String">
				<ToolTip>String functions.</ToolTip>
				<!--				<element name="Mid">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="InStr">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Len">
					<element_tip>Returns the length of a string or string variable.  E.g. Len([First Name]) returns 5 if First Name is "David".</element_tip>
					<signature>Len(fieldname).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Left">
					<element_tip>Returns the leftmost n characters in the text string or field.  E.g. Left("John", 2) returns "Jo".</element_tip>
					<signature>Left (text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Right">
					<element_tip>Returns the right-most n characters in the text string or field.  E.g. Right ("Adams", 2) returns "ms".</element_tip>
					<signature>Right(text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Conditional">
				<ToolTip>Conditional Functions</ToolTip>
				<!--				<element name="BCHasRow">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="IfNull">
					<element_tip>Returns the value of expression1 unless expression1 is NULL, in which case the value of expression2 is returned.</element_tip>
					<signature>IfNull(expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IIF">
					<element_tip>If test_expression is TRUE, returns the value of expr1; otherwise returns the value of expr2.  NOTE: If working with DTYPE_NUMBER fields, the Data Type of expr1 determines the Data Type of the resulting value.</element_tip>
					<signature>IIf (test_expression, expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="InList">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IsPrimary">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IS NOT NULL">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IS NULL">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<subcategory name="LookUp">
				<ToolTip>LookUp functions</ToolTip>
				<!--				<element name="BCName">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Field">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>:</postfix>
				</element>
				<element name="Expr">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>:</postfix>
				</element> -->
				<element name="Currency">
					<element_tip>Returns the currency code for the current position (for example, USD).</element_tip>
					<signature>Currency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="AccountId">
					<element_tip>Returns the current user's Account ID (OU_ID).</element_tip>
					<signature>AccountID().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ContactLoginId">
					<element_tip>Returns the contact ID of the currently logged in user.  If you do not use the contact login method for a Webbased application, the function cannot retrieve any value and returns an empty string. It is recommended that you use the contact login method and an external security authentication service (for example, LDAP).</element_tip>
					<signature>ContactLoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionId">
					<element_tip>Returns the current user's Division ID (BU_ID).  To limit visibility to employees from the same division as the person logged in, add the following to the search specification property of the Applet:  [Division Id] = DivisionId().</element_tip>
					<signature>DivisionId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionName">
					<element_tip>Returns the division name of a user who is an employee.  Use to limit visibility to employees from the same division as the person logged in.  Also use to display the division name of the user logging the service request.  Create a new calculated field so that, when the service request is created, the calculated field displays the division name of the current logged user that is creating the service request. Using the following configuration, the new joined field Reported By Division will be predefaulted to this value, and will never receive another value after this service request creation event.  To create a  calculated field that displays the division name of the current logged user creating a service request:  1 In the Service Request business component, create a new calculated field:  Calculated: TRUE; Calculated Value: DivisionName(); Name: Division (Calc); Parent Name: Service Request; Type: DTYPE_TEXT.2 In the Service Request Business Component, also create a new join to S_SRV_REQ_X table:  Column: ATTRIB_03; Join: S_SRV_REQ_X; Name: Reported By Division; Pre Default Value: Field: 'Division Name'; Read Only: TRUE.  Expose the joined field Reported By Division in the relevant applets.  You may also want to expose the calculated field Division (Calc), just to check the logic and set Visible = False later for the control or list column exposed.</element_tip>
					<signature>DivisionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JobTitle">
					<element_tip>Returns the Job Title of the currently logged-in employee.  Similar to PositionId() and DivisionId().</element_tip>
					<signature>JobTitle().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="FieldValue">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetBCRows">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="Language">
					<element_tip>Returns the language code (for example, ENU) which is the active client language setting, set by the Language parameter in the CFG file, or by the /L parameter when starting a Siebel application.  NOTE: This is not the Resource Language parameter.</element_tip>
					<signature>Language().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LocalCurrency">
					<element_tip>Returns the currency code for this machine (for example, JPY).</element_tip>
					<signature>LocalCurrency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginName">
					<element_tip>Returns login name (for example, BSTEVENS).</element_tip>
					<signature>LoginName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginId">
					<element_tip>Returns login ID (for example, 0-3241).</element_tip>
					<signature>LoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Lookup">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument and the VALUE column matches the value argument.  The function returns the value of the ORDER_BY column for that row.  The primary purpose of the Lookup function is to avoid additional joins in a business component.</element_tip>
					<signature>Lookup(type, value).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupExpr">
					<element_tip>Searches the rows in S_LST_OF_VAL where the TYPE column matches the type argument.  Evaluates the contents of the VALUE column treated as an expression.  Returns the value of the ORDER_BY column for the first row for which the expression evaluates to TRUE.  The LookupExpr function essentially performs an in-memory linear parse evaluate search, so you should  make sure that there are fewer than 30 rows in the LOV type.</element_tip>
					<signature>LookupExpr (type, value_expression).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupName">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language. Returns the language independent code (the CODE column) for the row.  This function is used to obtain the untranslated value in the specified LOV.</element_tip>
					<signature>LookupName (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupValue">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language.  Returns the display value (the VAL column) for the row.  LookupValue tries to find the display value for the specified lang_ind_code.  If not found,  lookupValue just returns the lang_ind_code itself as the value.  This function is used to obtain the translation of the specified untranslated value in the specified LOV into the currently active language.  NOTE: The LookupValue() function cannot be used directly in the Pre Default Value property of a field.  Instead, use a separate calculated field for the lookup, and reference the calculated field in the Pre Default.</element_tip>
					<signature>LookupValue (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationId">
					<element_tip>Returns the organization ID of the currently logged in user.</element_tip>
					<signature>OrganizationId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationName">
					<element_tip>Returns the organization name of a user who is an employee.</element_tip>
					<signature>OrganizationName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionName">
					<element_tip>Returns Position Name of currently logged-in employee.</element_tip>
					<signature>PositionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionId">
					<element_tip>Returns Position ID of currently logged-in employee (for example, 0-4432).</element_tip>
					<signature>PositionId(().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="LookUpTransValue">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookUpTransCode">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookUpTranslation">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="ParentBCName">
					<element_tip>Parent (master) business component name for active link (for example, Opportunity).</element_tip>
					<signature>ParentBCName(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentFieldValue">
					<element_tip>Returns the value of the field_name field in the parent business component.  The result is not typed correctly but is always of type String.  Also, the result does not change if the parent row is updated.  The parent business component field must be exported by using Link Specification = TRUE.</element_tip>
					<signature>ParentFieldValue(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="Preference">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="SystemPreference">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<!--			<subcategory name="Search">
				<ToolTip>Search Functions</ToolTip>
				<element name="FindOneOf">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="FindNoneOf">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory> -->
			<subcategory name="Invocation">
				<ToolTip>Invocation functions</ToolTip>
				<element name="InvokeServiceMethod">
					<element_tip>Invokes a business service from a calculated field and returns [Output Prop].  NOTE: Do not expose a calculated expression that invokes a business service in a list applet.  Doing so may result in poor performance because the business service will be repeatedly instantiated each time the field appears in the list.</element_tip>
					<signature>InvokeServiceMethodInvokeServiceMethod("[ServiceName]","[MethodName]","[InputProp1=val1,InputProp2=val2","[OutputProp]").</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Math">
				<ToolTip>Math functions</ToolTip>
				<element name="Count">
					<element_tip>Returns the number of rows in the multi-value group defined by the MVL mvlink.</element_tip>
					<signature>Count(mvlink).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="LN">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<!--				<element name="Max">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Min">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="RowIdToRowIdNum">
					<element_tip>Converts an alphanumeric row ID to a unique, pure numeric row ID in the Service Request business component.  In Siebel eBusiness 6.x, this expression has changed functionality; it is used for the predefault value of the "SR Number" field.</element_tip>
					<signature>RowIdToRowIdNum (Id).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Sum">
					<element_tip>Sums the values from a field in child records into a field in a parent record.  The child record being summed from must be defined as a multivalue field that is part of a multi-value group that is associated with the business component of the field being summed to.</element_tip>
					<signature>Sum (mvfield).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ToChar">
					<element_tip>Returns a string that represents a number or date in a format specified by the optional format parameter.  (For example, ToChar (10, "##.##") returns "10.00").</element_tip>
					<signature>ToChar (number_expression, format).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Date/Time">
				<ToolTip>Date &amp; Time Functions.</ToolTip>
				<element name="JulianDay">
					<element_tip>Equal to the Oracle (and Sagent) Julian Day, for all dates in the 20th and 21st centuries.</element_tip>
					<signature>JulianDay().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianMonth">
					<element_tip>Equal to the JulianYear() * 12 + currentMonth, where January = 1.</element_tip>
					<signature>JulianMonth().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianQtr">
					<element_tip>Equal to the JulianYear() * 4 + currentQuarter, where currentQuarter = (currentMonth - 1) / 3 + 1 rounded down to the next integer.</element_tip>
					<signature>JulianQtr().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianWeek">
					<element_tip>JulianDay() / 7, rounded down to the next integer.</element_tip>
					<signature>JulianWeek().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianYear">
					<element_tip>Equal to the current year + 4713.</element_tip>
					<signature>JulianYear().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="TimeStamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).  The Timestamp function can also be used in queries.  For example:  Created >= Timestamp() - 0.  Against an MS SQL Server database would return those records created within the last one-tenth of a day.</element_tip>
					<signature>TimeStamp().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Today">
					<element_tip>Today's date (for example, 1/26/96, which is January 26, 1996 for the U.S. locale).</element_tip>
					<signature>Today().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="UtcConvert">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<subcategory name="Profile">
				<ToolTip>Profile functions</ToolTip>
				<element name="GetProfileAttr">
					<element_tip>Returns the value stored in the profile attribute if that attribute has been defined. Used in personalization to retrieve values of attributes in a user profile and to pass information from a script to the UI.  Set a session-specific personalization attribute equal to the value of the shared global and reference the personalization attribute in a calculated field.  NOTE: For an undefined attribute or for an attribute that has not been set up, GetProfileAttr returns NULL.  This is important when you are using comparison operators.  For example:  1) GetProfileAttr (Attribute) = "" always returns FALSE either if the Attribute does not exist or exists and the value is different than "".  2) GetProfileAttr (Attribute) IS NULL returns TRUE if the Attribute does not exist and FALSE otherwise.</element_tip>
					<signature>GetProfileAttribute(Attribute).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="GetProfileAttrAsList">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsDate">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsDateTime">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsInt">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsNumber">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsTime">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsUtcDateTime">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<!-- <subcategory name="Ext. Attributes">
				<element name="GetXAVal">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetXAValAsDate">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetXAValAsInt">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetXAValAsNum">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="XAIsClass">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory> -->
		</category>
		<category name="Keywords">
			<ToolTip>Keywords.</ToolTip>
			<subcategory name="General keywords">
				<ToolTip>General keywords</ToolTip>
				<element name="EXISTS">
					<element_tip/>
					<signature>EXISTS</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Operators">
			<ToolTip>Operators for expressions</ToolTip>
			<subcategory name="Arithmetic">
				<ToolTip>Arithmetic operators</ToolTip>
				<element name="-">
					<element_tip>Subtraction</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="^">
					<element_tip>Power</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="+">
					<element_tip>Addition</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="*">
					<element_tip>Multiplication</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="/">
					<element_tip>Division</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<!-- <element name="Mod">
					<element_tip>"A Mod B"  returns the integer remainder of "A / B".  For example, "17 Mod 5" returns 2.</element_tip>
					<signature>Modulus.  Example:  A Mod B.</signature>
					<prefix/>
					<postfix/>
				</element>-->
			</subcategory>
			<subcategory name="Comparison">
				<ToolTip>Comparison Operators</ToolTip>
				<element name="=">
					<element_tip>Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;">
					<element_tip>Less Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;">
					<element_tip>Greater Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;&gt;">
					<element_tip>Not Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;=">
					<element_tip>Less Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;=">
					<element_tip>Greater Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NULL">
					<element_tip>Returns TRUE if NULL</element_tip>
					<signature>Is null.  Example:  expression IS NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NOT NULL">
					<element_tip>Returns TRUE if not NULL</element_tip>
					<signature>Is not null.  Example:  expression IS NOT NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Concatenation">
				<ToolTip>String concatenation operators</ToolTip>
				<element name="+">
					<element_tip>Concatenates n strings.  For example "string1" + "string2" + "string3" results in "string1string2string3".</element_tip>
					<signature>String concatenation.  Example:  "string1" + "string2".</signature>
					<prefix/>
					<postfix/>
				</element>
				<!--	<element name="&amp;">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element> -->
			</subcategory>
			<subcategory name="Logical">
				<ToolTip>Logical Operators</ToolTip>
				<element name="AND">
					<element_tip>Returns TRUE if all argument expressions evaluate to TRUE.</element_tip>
					<signature>Logical AND.  Example:  a AND b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="OR">
					<element_tip>Returns TRUE unless both expressions a and b evaluate to false.</element_tip>
					<signature>Logical OR.  Example:  a OR b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT">
					<element_tip>Returns TRUE if a evaluates to FALSE.</element_tip>
					<signature>Logical NOT.  Example:  NOT a.</signature>
					<prefix/>
					<postfix/>
				</element>
				<!--				<element name="EQV">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IMP">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element> -->
				<element name="XOR">
					<element_tip>Exclusive or.  Returns FALSE if both a and b are false or if a and b are both TRUE.  That is, returns true when exactly one of a or b evaluates to TRUE.</element_tip>
					<signature>Logical XOR.  Example:  a XOR b.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Other">
				<element name="LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="EXISTS">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Wildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="SingleCharWildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Is">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Profile Attributes">
			<ToolTip>Profile attributes</ToolTip>		
			<subcategory name="All">
				<ToolTip>All attributes</ToolTip>		
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="" appliesTo="Repository Applet">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>												
				<element name="" appliesTo="Repository WF Step I/O Argument">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>			
	    </category>
	  <ServiceValidation>
		 <!-- There can be only ONE of each of these elements!!! -->
		 <SyntaxServiceName>Siebel Tools Expression Builder</SyntaxServiceName>
		 <SyntaxServiceMethod>ValidateSiebelQueryLanguage</SyntaxServiceMethod>
	  </ServiceValidation>     
	</ExprBuilderType>
	<ExprBuilderType name="Task">
		<!-- the name attribute is used to name this button.  Expects: string -->
		<!-- the wrap attribute is used to indicate whether the item to insert,
				when the button is pressed, should enclose the selected text.  This is 
				typical, for example, on a button with text to insert of '[]' (i.e [text]).  
				When pushed the square brackets will wrap the selected text.  When this 
				attribute is true, it is also assumed that the text to insert is at least 
				two characters in length. If wrap is false, the text is simply inserted 
				at the cursor location. Highlighted text will be replaced by the text of
				the button, not wrapped.  
				Expects: true or false -->
		<!-- the order attribute is used to indicate where this button will be placed in
				the toolbar.  Expects: integer -->
		<!-- There can be multiple button nodes.  Each describes a button object. -->
		<Button order="1">
			<Button_Prefix> AND </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> OR </Button_Postfix>
			<Button_Tip>Logical OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix> XOR </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical XOR</Button_Tip>
			<Button_Text>XOR</Button_Text>
		</Button>
		<Button order="4">
			<Button_Prefix> NOT </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="5">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<Button order="6">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> LIKE </Button_Postfix>
			<Button_Tip>LIKE</Button_Tip>
			<Button_Text>LIKE</Button_Text>
		</Button>
		<Button order="7">
			<Button_Prefix> IS </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IS</Button_Tip>
			<Button_Text>IS</Button_Text>
		</Button>
		<Button order="8">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> NULL </Button_Postfix>
			<Button_Tip>NULL</Button_Tip>
			<Button_Text>NULL</Button_Text>
		</Button>
		<Button order="9">
			<Button_Prefix> IIf </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IIf</Button_Tip>
			<Button_Text>IIf</Button_Text>
		</Button>
		<Button order="10">
			<Button_Prefix> IfNull </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IfNull</Button_Tip>
			<Button_Text>IfNull</Button_Text>
		</Button>
		<Button order="11">
			<Button_Prefix> + </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Addition</Button_Tip>
			<Button_Text>+</Button_Text>
		</Button>
		<Button order="12">
			<Button_Prefix> - </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Subtraction</Button_Tip>
			<Button_Text>-</Button_Text>
		</Button>
		<Button order="13">
			<Button_Prefix> * </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Multiplication</Button_Tip>
			<Button_Text>*</Button_Text>
		</Button>
		<Button order="14">
			<Button_Prefix> / </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Division</Button_Tip>
			<Button_Text>/</Button_Text>
		</Button>
		<!-- <Button order="15">
			<Button_Prefix> MOD </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Modulus</Button_Tip>
			<Button_Text>MOD</Button_Text>
		</Button>-->
		<Button order="16">
			<Button_Prefix> ^ </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Power</Button_Tip>
			<Button_Text>^</Button_Text>
		</Button>
		<Button order="17">
			<Button_Prefix> &lt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Less Than</Button_Tip>
			<Button_Text>&lt;</Button_Text>
		</Button>
		<Button order="18">
			<Button_Prefix> &gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Greater Than</Button_Tip>
			<Button_Text>&gt;</Button_Text>
		</Button>
		<Button order="19">
			<Button_Prefix> &lt;&gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Not Equal To</Button_Tip>
			<Button_Text>&lt;&gt;</Button_Text>
		</Button>
		<Button order="20">
			<Button_Prefix> = </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Equal To</Button_Tip>
			<Button_Text>=</Button_Text>
		</Button>		
		<!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Search Specification field. -->
		<category name="Functions">
			<ToolTip>Functions for Siebel Calculated Expressions.  Can be used in Calculated Field and Validation field expressions.</ToolTip>
			<subcategory name="String">
				<ToolTip>String functions.</ToolTip>
				<element name="InStr">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Len">
					<element_tip>Returns the length of a string or string variable.  E.g. Len([First Name]) returns 5 if First Name is "David".</element_tip>
					<signature>Len(fieldname).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Left">
					<element_tip>Returns the leftmost n characters in the text string or field.  E.g. Left("John", 2) returns "Jo".</element_tip>
					<signature>Left (text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Right">
					<element_tip>Returns the right-most n characters in the text string or field.  E.g. Right ("Adams", 2) returns "ms".</element_tip>
					<signature>Right(text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Conditional">
				<ToolTip>Conditional Functions</ToolTip>
				<element name="IfNull">
					<element_tip>Returns the value of expression1 unless expression1 is NULL, in which case the value of expression2 is returned.</element_tip>
					<signature>IfNull(expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IIF">
					<element_tip>If test_expression is TRUE, returns the value of expr1; otherwise returns the value of expr2.  NOTE: If working with DTYPE_NUMBER fields, the Data Type of expr1 determines the Data Type of the resulting value.</element_tip>
					<signature>IIf (test_expression, expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="LookUp">
				<ToolTip>LookUp functions</ToolTip>
				<element name="Currency">
					<element_tip>Returns the currency code for the current position (for example, USD).</element_tip>
					<signature>Currency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="AccountId">
					<element_tip>Returns the current user's Account ID (OU_ID).</element_tip>
					<signature>AccountID().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ContactLoginId">
					<element_tip>Returns the contact ID of the currently logged in user.  If you do not use the contact login method for a Webbased application, the function cannot retrieve any value and returns an empty string. It is recommended that you use the contact login method and an external security authentication service (for example, LDAP).</element_tip>
					<signature>ContactLoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionId">
					<element_tip>Returns the current user's Division ID (BU_ID).  To limit visibility to employees from the same division as the person logged in, add the following to the search specification property of the Applet:  [Division Id] = DivisionId().</element_tip>
					<signature>DivisionId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionName">
					<element_tip>Returns the division name of a user who is an employee.  Use to limit visibility to employees from the same division as the person logged in.  Also use to display the division name of the user logging the service request.  Create a new calculated field so that, when the service request is created, the calculated field displays the division name of the current logged user that is creating the service request. Using the following configuration, the new joined field Reported By Division will be predefaulted to this value, and will never receive another value after this service request creation event.  To create a  calculated field that displays the division name of the current logged user creating a service request:  1 In the Service Request business component, create a new calculated field:  Calculated: TRUE; Calculated Value: DivisionName(); Name: Division (Calc); Parent Name: Service Request; Type: DTYPE_TEXT.2 In the Service Request Business Component, also create a new join to S_SRV_REQ_X table:  Column: ATTRIB_03; Join: S_SRV_REQ_X; Name: Reported By Division; Pre Default Value: Field: 'Division Name'; Read Only: TRUE.  Expose the joined field Reported By Division in the relevant applets.  You may also want to expose the calculated field Division (Calc), just to check the logic and set Visible = False later for the control or list column exposed.</element_tip>
					<signature>DivisionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JobTitle">
					<element_tip>Returns the Job Title of the currently logged-in employee.  Similar to PositionId() and DivisionId().</element_tip>
					<signature>JobTitle().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Language">
					<element_tip>Returns the language code (for example, ENU) which is the active client language setting, set by the Language parameter in the CFG file, or by the /L parameter when starting a Siebel application.  NOTE: This is not the Resource Language parameter.</element_tip>
					<signature>Language().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LocalCurrency">
					<element_tip>Returns the currency code for this machine (for example, JPY).</element_tip>
					<signature>LocalCurrency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginName">
					<element_tip>Returns login name (for example, BSTEVENS).</element_tip>
					<signature>LoginName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginId">
					<element_tip>Returns login ID (for example, 0-3241).</element_tip>
					<signature>LoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Lookup">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument and the VALUE column matches the value argument.  The function returns the value of the ORDER_BY column for that row.  The primary purpose of the Lookup function is to avoid additional joins in a business component.</element_tip>
					<signature>Lookup(type, value).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupExpr">
					<element_tip>Searches the rows in S_LST_OF_VAL where the TYPE column matches the type argument.  Evaluates the contents of the VALUE column treated as an expression.  Returns the value of the ORDER_BY column for the first row for which the expression evaluates to TRUE.  The LookupExpr function essentially performs an in-memory linear parse evaluate search, so you should  make sure that there are fewer than 30 rows in the LOV type.</element_tip>
					<signature>LookupExpr (type, value_expression).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupName">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language. Returns the language independent code (the CODE column) for the row.  This function is used to obtain the untranslated value in the specified LOV.</element_tip>
					<signature>LookupName (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupValue">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language.  Returns the display value (the VAL column) for the row.  LookupValue tries to find the display value for the specified lang_ind_code.  If not found,  lookupValue just returns the lang_ind_code itself as the value.  This function is used to obtain the translation of the specified untranslated value in the specified LOV into the currently active language.  NOTE: The LookupValue() function cannot be used directly in the Pre Default Value property of a field.  Instead, use a separate calculated field for the lookup, and reference the calculated field in the Pre Default.</element_tip>
					<signature>LookupValue (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationId">
					<element_tip>Returns the organization ID of the currently logged in user.</element_tip>
					<signature>OrganizationId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationName">
					<element_tip>Returns the organization name of a user who is an employee.</element_tip>
					<signature>OrganizationName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionName">
					<element_tip>Returns Position Name of currently logged-in employee.</element_tip>
					<signature>PositionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionId">
					<element_tip>Returns Position ID of currently logged-in employee (for example, 0-4432).</element_tip>
					<signature>PositionId(().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentBCName">
					<element_tip>Parent (master) business component name for active link (for example, Opportunity).</element_tip>
					<signature>ParentBCName(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentFieldValue">
					<element_tip>Returns the value of the field_name field in the parent business component.  The result is not typed correctly but is always of type String.  Also, the result does not change if the parent row is updated.  The parent business component field must be exported by using Link Specification = TRUE.</element_tip>
					<signature>ParentFieldValue(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Invocation">
				<ToolTip>Invocation functions</ToolTip>
				<element name="InvokeServiceMethod">
					<element_tip>Invokes a business service from a calculated field and returns [Output Prop].  NOTE: Do not expose a calculated expression that invokes a business service in a list applet.  Doing so may result in poor performance because the business service will be repeatedly instantiated each time the field appears in the list.</element_tip>
					<signature>InvokeServiceMethodInvokeServiceMethod("[ServiceName]","[MethodName]","[InputProp1=val1,InputProp2=val2","[OutputProp]").</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Math">
				<ToolTip>Math functions</ToolTip>
				<element name="Count">
					<element_tip>Returns the number of rows in the multi-value group defined by the MVL mvlink.</element_tip>
					<signature>Count(mvlink).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="RowIdToRowIdNum">
					<element_tip>Converts an alphanumeric row ID to a unique, pure numeric row ID in the Service Request business component.  In Siebel eBusiness 6.x, this expression has changed functionality; it is used for the predefault value of the "SR Number" field.</element_tip>
					<signature>RowIdToRowIdNum (Id).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Sum">
					<element_tip>Sums the values from a field in child records into a field in a parent record.  The child record being summed from must be defined as a multivalue field that is part of a multi-value group that is associated with the business component of the field being summed to.</element_tip>
					<signature>Sum (mvfield).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ToChar">
					<element_tip>Returns a string that represents a number or date in a format specified by the optional format parameter.  (For example, ToChar (10, "##.##") returns "10.00").</element_tip>
					<signature>ToChar (number_expression, format).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Date/Time">
				<ToolTip>Date &amp; Time Functions.</ToolTip>
				<element name="JulianDay">
					<element_tip>Equal to the Oracle (and Sagent) Julian Day, for all dates in the 20th and 21st centuries.</element_tip>
					<signature>JulianDay().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianMonth">
					<element_tip>Equal to the JulianYear() * 12 + currentMonth, where January = 1.</element_tip>
					<signature>JulianMonth().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianQtr">
					<element_tip>Equal to the JulianYear() * 4 + currentQuarter, where currentQuarter = (currentMonth - 1) / 3 + 1 rounded down to the next integer.</element_tip>
					<signature>JulianQtr().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianWeek">
					<element_tip>JulianDay() / 7, rounded down to the next integer.</element_tip>
					<signature>JulianWeek().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianYear">
					<element_tip>Equal to the current year + 4713.</element_tip>
					<signature>JulianYear().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="TimeStamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).  The Timestamp function can also be used in queries.  For example:  Created >= Timestamp() - 0.  Against an MS SQL Server database would return those records created within the last one-tenth of a day.</element_tip>
					<signature>TimeStamp().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Today">
					<element_tip>Today's date (for example, 1/26/96, which is January 26, 1996 for the U.S. locale).</element_tip>
					<signature>Today().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Profile">
				<ToolTip>Profile functions</ToolTip>
				<element name="GetProfileAttr">
					<element_tip>Returns the value stored in the profile attribute if that attribute has been defined. Used in personalization to retrieve values of attributes in a user profile and to pass information from a script to the UI.  Set a session-specific personalization attribute equal to the value of the shared global and reference the personalization attribute in a calculated field.  NOTE: For an undefined attribute or for an attribute that has not been set up, GetProfileAttr returns NULL.  This is important when you are using comparison operators.  For example:  1) GetProfileAttr (Attribute) = "" always returns FALSE either if the Attribute does not exist or exists and the value is different than "".  2) GetProfileAttr (Attribute) IS NULL returns TRUE if the Attribute does not exist and FALSE otherwise.</element_tip>
					<signature>GetProfileAttribute(Attribute).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Keywords">
			<ToolTip>Keywords.</ToolTip>
			<subcategory name="General keywords">
				<ToolTip>General keywords</ToolTip>
				<element name="EXISTS">
					<element_tip/>
					<signature>EXISTS</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Operators">
			<ToolTip>Operators for expressions</ToolTip>
			<subcategory name="Arithmetic">
				<ToolTip>Arithmetic operators</ToolTip>
				<element name="-">
					<element_tip>Subtraction</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="^">
					<element_tip>Power</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="+">
					<element_tip>Addition</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="*">
					<element_tip>Multiplication</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="/">
					<element_tip>Division</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<!-- <element name="Mod">
					<element_tip>"A Mod B"  returns the integer remainder of "A / B".  For example, "17 Mod 5" returns 2.</element_tip>
					<signature>Modulus.  Example:  A Mod B.</signature>
					<prefix/>
					<postfix/>
				</element>-->
			</subcategory>
			<subcategory name="Comparison">
				<ToolTip>Comparison Operators</ToolTip>
				<element name="=">
					<element_tip>Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;">
					<element_tip>Less Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;">
					<element_tip>Greater Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;&gt;">
					<element_tip>Not Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;=">
					<element_tip>Less Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;=">
					<element_tip>Greater Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NULL">
					<element_tip>Returns TRUE if NULL</element_tip>
					<signature>Is null.  Example:  expression IS NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NOT NULL">
					<element_tip>Returns TRUE if not NULL</element_tip>
					<signature>Is not null.  Example:  expression IS NOT NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Concatenation">
				<ToolTip>String concatenation operators</ToolTip>
				<element name="+">
					<element_tip>Concatenates n strings.  For example "string1" + "string2" + "string3" results in "string1string2string3".</element_tip>
					<signature>String concatenation.  Example:  "string1" + "string2".</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Logical">
				<ToolTip>Logical Operators</ToolTip>
				<element name="AND">
					<element_tip>Returns TRUE if all argument expressions evaluate to TRUE.</element_tip>
					<signature>Logical AND.  Example:  a AND b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="OR">
					<element_tip>Returns TRUE unless both expressions a and b evaluate to false.</element_tip>
					<signature>Logical OR.  Example:  a OR b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT">
					<element_tip>Returns TRUE if a evaluates to FALSE.</element_tip>
					<signature>Logical NOT.  Example:  NOT a.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="XOR">
					<element_tip>Exclusive or.  Returns FALSE if both a and b are false or if a and b are both TRUE.  That is, returns true when exactly one of a or b evaluates to TRUE.</element_tip>
					<signature>Logical XOR.  Example:  a XOR b.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Other">
				<element name="LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="EXISTS">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Wildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="SingleCharWildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Is">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Profile Attributes">
			<ToolTip>Profile attributes</ToolTip>		
			<subcategory name="All">
				<ToolTip>All attributes</ToolTip>		
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="" appliesTo="Repository Applet">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>												
				<element name="" appliesTo="Repository Task Step IO Argument">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>			
	    </category>
	  <ServiceValidation>
		 <!-- There can be only ONE of each of these elements!!! -->
		 <SyntaxServiceName>Siebel Tools Expression Builder</SyntaxServiceName>
		 <SyntaxServiceMethod>ValidateSiebelQueryLanguage</SyntaxServiceMethod>
	  </ServiceValidation>     
	</ExprBuilderType>
	<ExprBuilderType name="TaskContext">
		<Button order="1">
			<Button_Prefix> AND </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> OR </Button_Postfix>
			<Button_Tip>Logical OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix> XOR </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical XOR</Button_Tip>
			<Button_Text>XOR</Button_Text>
		</Button>
		<Button order="4">
			<Button_Prefix> NOT </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="5">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<Button order="6">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> LIKE </Button_Postfix>
			<Button_Tip>LIKE</Button_Tip>
			<Button_Text>LIKE</Button_Text>
		</Button>
		<Button order="7">
			<Button_Prefix> IS </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IS</Button_Tip>
			<Button_Text>IS</Button_Text>
		</Button>
		<Button order="8">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> NULL </Button_Postfix>
			<Button_Tip>NULL</Button_Tip>
			<Button_Text>NULL</Button_Text>
		</Button>
		<Button order="9">
			<Button_Prefix> IIf </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IIf</Button_Tip>
			<Button_Text>IIf</Button_Text>
		</Button>
		<Button order="10">
			<Button_Prefix> IfNull </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IfNull</Button_Tip>
			<Button_Text>IfNull</Button_Text>
		</Button>
		<Button order="11">
			<Button_Prefix> + </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Addition</Button_Tip>
			<Button_Text>+</Button_Text>
		</Button>
		<Button order="12">
			<Button_Prefix> - </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Subtraction</Button_Tip>
			<Button_Text>-</Button_Text>
		</Button>
		<Button order="13">
			<Button_Prefix> * </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Multiplication</Button_Tip>
			<Button_Text>*</Button_Text>
		</Button>
		<Button order="14">
			<Button_Prefix> / </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Division</Button_Tip>
			<Button_Text>/</Button_Text>
		</Button>
		<!-- <Button order="15">
			<Button_Prefix> MOD </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Modulus</Button_Tip>
			<Button_Text>MOD</Button_Text>
		</Button>-->
		<Button order="16">
			<Button_Prefix> ^ </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Power</Button_Tip>
			<Button_Text>^</Button_Text>
		</Button>
		<Button order="17">
			<Button_Prefix> &lt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Less Than</Button_Tip>
			<Button_Text>&lt;</Button_Text>
		</Button>
		<Button order="18">
			<Button_Prefix> &gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Greater Than</Button_Tip>
			<Button_Text>&gt;</Button_Text>
		</Button>
		<Button order="19">
			<Button_Prefix> &lt;&gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Not Equal To</Button_Tip>
			<Button_Text>&lt;&gt;</Button_Text>
		</Button>
		<Button order="20">
			<Button_Prefix> = </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Equal To</Button_Tip>
			<Button_Text>=</Button_Text>
		</Button>		
		<!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Search Specification field. -->
		<category name="Expression BC">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business component fields for fields referenced in the left hand side of the expression</ToolTip>
			<subcategory name="All" containsFields="true">
				<ToolTip>All Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<!-- An element either has a value attribute or a set of QueryPathSteps
					 that will define it - not both. -->
				<!-- appliesTo is REQUIRED for context sensitive elements (if the 
					 subcategory is not static, i.e for those that contain queryPathSteps 
					 if their subcategory is not dynamically generated)  -->
				<element name="" appliesTo="Repository Task Step Context">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Expression Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Task Step Context">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Expression Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Task Step Context">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Expression Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Task Step Context">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Expression Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Filter BC">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business component fields for fields referenced in the right hand side of the expression</ToolTip>
			<subcategory name="All" containsFields="true">
				<ToolTip>All Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<!-- An element either has a value attribute or a set of QueryPathSteps
					 that will define it - not both. -->
				<!-- appliesTo is REQUIRED for context sensitive elements (if the 
					 subcategory is not static, i.e for those that contain queryPathSteps 
					 if their subcategory is not dynamically generated)  -->
				<element name="" appliesTo="Repository Task Step Context">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Filter Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Task Step Context">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Filter Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Task Step Context">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Filter Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Task Step Context">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="Filter Business Component"></SearchValue>
						<RetrieveField>Id</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Functions">
			<ToolTip>Functions for Siebel Calculated Expressions.  Can be used in Calculated Field and Validation field expressions.</ToolTip>
			<subcategory name="String">
				<ToolTip>String functions.</ToolTip>
				<element name="InStr">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Len">
					<element_tip>Returns the length of a string or string variable.  E.g. Len([First Name]) returns 5 if First Name is "David".</element_tip>
					<signature>Len(fieldname).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Left">
					<element_tip>Returns the leftmost n characters in the text string or field.  E.g. Left("John", 2) returns "Jo".</element_tip>
					<signature>Left (text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Right">
					<element_tip>Returns the right-most n characters in the text string or field.  E.g. Right ("Adams", 2) returns "ms".</element_tip>
					<signature>Right(text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Conditional">
				<ToolTip>Conditional Functions</ToolTip>
				<element name="IfNull">
					<element_tip>Returns the value of expression1 unless expression1 is NULL, in which case the value of expression2 is returned.</element_tip>
					<signature>IfNull(expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IIF">
					<element_tip>If test_expression is TRUE, returns the value of expr1; otherwise returns the value of expr2.  NOTE: If working with DTYPE_NUMBER fields, the Data Type of expr1 determines the Data Type of the resulting value.</element_tip>
					<signature>IIf (test_expression, expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="LookUp">
				<ToolTip>LookUp functions</ToolTip>
				<element name="Currency">
					<element_tip>Returns the currency code for the current position (for example, USD).</element_tip>
					<signature>Currency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="AccountId">
					<element_tip>Returns the current user's Account ID (OU_ID).</element_tip>
					<signature>AccountID().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ContactLoginId">
					<element_tip>Returns the contact ID of the currently logged in user.  If you do not use the contact login method for a Webbased application, the function cannot retrieve any value and returns an empty string. It is recommended that you use the contact login method and an external security authentication service (for example, LDAP).</element_tip>
					<signature>ContactLoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionId">
					<element_tip>Returns the current user's Division ID (BU_ID).  To limit visibility to employees from the same division as the person logged in, add the following to the search specification property of the Applet:  [Division Id] = DivisionId().</element_tip>
					<signature>DivisionId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionName">
					<element_tip>Returns the division name of a user who is an employee.  Use to limit visibility to employees from the same division as the person logged in.  Also use to display the division name of the user logging the service request.  Create a new calculated field so that, when the service request is created, the calculated field displays the division name of the current logged user that is creating the service request. Using the following configuration, the new joined field Reported By Division will be predefaulted to this value, and will never receive another value after this service request creation event.  To create a  calculated field that displays the division name of the current logged user creating a service request:  1 In the Service Request business component, create a new calculated field:  Calculated: TRUE; Calculated Value: DivisionName(); Name: Division (Calc); Parent Name: Service Request; Type: DTYPE_TEXT.2 In the Service Request Business Component, also create a new join to S_SRV_REQ_X table:  Column: ATTRIB_03; Join: S_SRV_REQ_X; Name: Reported By Division; Pre Default Value: Field: 'Division Name'; Read Only: TRUE.  Expose the joined field Reported By Division in the relevant applets.  You may also want to expose the calculated field Division (Calc), just to check the logic and set Visible = False later for the control or list column exposed.</element_tip>
					<signature>DivisionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JobTitle">
					<element_tip>Returns the Job Title of the currently logged-in employee.  Similar to PositionId() and DivisionId().</element_tip>
					<signature>JobTitle().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Language">
					<element_tip>Returns the language code (for example, ENU) which is the active client language setting, set by the Language parameter in the CFG file, or by the /L parameter when starting a Siebel application.  NOTE: This is not the Resource Language parameter.</element_tip>
					<signature>Language().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LocalCurrency">
					<element_tip>Returns the currency code for this machine (for example, JPY).</element_tip>
					<signature>LocalCurrency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginName">
					<element_tip>Returns login name (for example, BSTEVENS).</element_tip>
					<signature>LoginName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginId">
					<element_tip>Returns login ID (for example, 0-3241).</element_tip>
					<signature>LoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Lookup">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument and the VALUE column matches the value argument.  The function returns the value of the ORDER_BY column for that row.  The primary purpose of the Lookup function is to avoid additional joins in a business component.</element_tip>
					<signature>Lookup(type, value).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupExpr">
					<element_tip>Searches the rows in S_LST_OF_VAL where the TYPE column matches the type argument.  Evaluates the contents of the VALUE column treated as an expression.  Returns the value of the ORDER_BY column for the first row for which the expression evaluates to TRUE.  The LookupExpr function essentially performs an in-memory linear parse evaluate search, so you should  make sure that there are fewer than 30 rows in the LOV type.</element_tip>
					<signature>LookupExpr (type, value_expression).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupName">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language. Returns the language independent code (the CODE column) for the row.  This function is used to obtain the untranslated value in the specified LOV.</element_tip>
					<signature>LookupName (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupValue">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language.  Returns the display value (the VAL column) for the row.  LookupValue tries to find the display value for the specified lang_ind_code.  If not found,  lookupValue just returns the lang_ind_code itself as the value.  This function is used to obtain the translation of the specified untranslated value in the specified LOV into the currently active language.  NOTE: The LookupValue() function cannot be used directly in the Pre Default Value property of a field.  Instead, use a separate calculated field for the lookup, and reference the calculated field in the Pre Default.</element_tip>
					<signature>LookupValue (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationId">
					<element_tip>Returns the organization ID of the currently logged in user.</element_tip>
					<signature>OrganizationId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationName">
					<element_tip>Returns the organization name of a user who is an employee.</element_tip>
					<signature>OrganizationName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionName">
					<element_tip>Returns Position Name of currently logged-in employee.</element_tip>
					<signature>PositionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionId">
					<element_tip>Returns Position ID of currently logged-in employee (for example, 0-4432).</element_tip>
					<signature>PositionId(().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentBCName">
					<element_tip>Parent (master) business component name for active link (for example, Opportunity).</element_tip>
					<signature>ParentBCName(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentFieldValue">
					<element_tip>Returns the value of the field_name field in the parent business component.  The result is not typed correctly but is always of type String.  Also, the result does not change if the parent row is updated.  The parent business component field must be exported by using Link Specification = TRUE.</element_tip>
					<signature>ParentFieldValue(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Invocation">
				<ToolTip>Invocation functions</ToolTip>
				<element name="InvokeServiceMethod">
					<element_tip>Invokes a business service from a calculated field and returns [Output Prop].  NOTE: Do not expose a calculated expression that invokes a business service in a list applet.  Doing so may result in poor performance because the business service will be repeatedly instantiated each time the field appears in the list.</element_tip>
					<signature>InvokeServiceMethodInvokeServiceMethod("[ServiceName]","[MethodName]","[InputProp1=val1,InputProp2=val2","[OutputProp]").</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Math">
				<ToolTip>Math functions</ToolTip>
				<element name="Count">
					<element_tip>Returns the number of rows in the multi-value group defined by the MVL mvlink.</element_tip>
					<signature>Count(mvlink).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="RowIdToRowIdNum">
					<element_tip>Converts an alphanumeric row ID to a unique, pure numeric row ID in the Service Request business component.  In Siebel eBusiness 6.x, this expression has changed functionality; it is used for the predefault value of the "SR Number" field.</element_tip>
					<signature>RowIdToRowIdNum (Id).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Sum">
					<element_tip>Sums the values from a field in child records into a field in a parent record.  The child record being summed from must be defined as a multivalue field that is part of a multi-value group that is associated with the business component of the field being summed to.</element_tip>
					<signature>Sum (mvfield).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ToChar">
					<element_tip>Returns a string that represents a number or date in a format specified by the optional format parameter.  (For example, ToChar (10, "##.##") returns "10.00").</element_tip>
					<signature>ToChar (number_expression, format).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Date/Time">
				<ToolTip>Date &amp; Time Functions.</ToolTip>
				<element name="JulianDay">
					<element_tip>Equal to the Oracle (and Sagent) Julian Day, for all dates in the 20th and 21st centuries.</element_tip>
					<signature>JulianDay().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianMonth">
					<element_tip>Equal to the JulianYear() * 12 + currentMonth, where January = 1.</element_tip>
					<signature>JulianMonth().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianQtr">
					<element_tip>Equal to the JulianYear() * 4 + currentQuarter, where currentQuarter = (currentMonth - 1) / 3 + 1 rounded down to the next integer.</element_tip>
					<signature>JulianQtr().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianWeek">
					<element_tip>JulianDay() / 7, rounded down to the next integer.</element_tip>
					<signature>JulianWeek().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianYear">
					<element_tip>Equal to the current year + 4713.</element_tip>
					<signature>JulianYear().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="TimeStamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).  The Timestamp function can also be used in queries.  For example:  Created >= Timestamp() - 0.  Against an MS SQL Server database would return those records created within the last one-tenth of a day.</element_tip>
					<signature>TimeStamp().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Today">
					<element_tip>Today's date (for example, 1/26/96, which is January 26, 1996 for the U.S. locale).</element_tip>
					<signature>Today().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Profile">
				<ToolTip>Profile functions</ToolTip>
				<element name="GetProfileAttr">
					<element_tip>Returns the value stored in the profile attribute if that attribute has been defined. Used in personalization to retrieve values of attributes in a user profile and to pass information from a script to the UI.  Set a session-specific personalization attribute equal to the value of the shared global and reference the personalization attribute in a calculated field.  NOTE: For an undefined attribute or for an attribute that has not been set up, GetProfileAttr returns NULL.  This is important when you are using comparison operators.  For example:  1) GetProfileAttr (Attribute) = "" always returns FALSE either if the Attribute does not exist or exists and the value is different than "".  2) GetProfileAttr (Attribute) IS NULL returns TRUE if the Attribute does not exist and FALSE otherwise.</element_tip>
					<signature>GetProfileAttribute(Attribute).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Keywords">
			<ToolTip>Keywords.</ToolTip>
			<subcategory name="General keywords">
				<ToolTip>General keywords</ToolTip>
				<element name="EXISTS">
					<element_tip/>
					<signature>EXISTS</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Operators">
			<ToolTip>Operators for expressions</ToolTip>
			<subcategory name="Arithmetic">
				<ToolTip>Arithmetic operators</ToolTip>
				<element name="-">
					<element_tip>Subtraction</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="^">
					<element_tip>Power</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="+">
					<element_tip>Addition</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="*">
					<element_tip>Multiplication</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="/">
					<element_tip>Division</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<!-- <element name="Mod">
					<element_tip>"A Mod B"  returns the integer remainder of "A / B".  For example, "17 Mod 5" returns 2.</element_tip>
					<signature>Modulus.  Example:  A Mod B.</signature>
					<prefix/>
					<postfix/>
				</element>-->
			</subcategory>
			<subcategory name="Comparison">
				<ToolTip>Comparison Operators</ToolTip>
				<element name="=">
					<element_tip>Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;">
					<element_tip>Less Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;">
					<element_tip>Greater Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;&gt;">
					<element_tip>Not Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;=">
					<element_tip>Less Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;=">
					<element_tip>Greater Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NULL">
					<element_tip>Returns TRUE if NULL</element_tip>
					<signature>Is null.  Example:  expression IS NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NOT NULL">
					<element_tip>Returns TRUE if not NULL</element_tip>
					<signature>Is not null.  Example:  expression IS NOT NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Concatenation">
				<ToolTip>String concatenation operators</ToolTip>
				<element name="+">
					<element_tip>Concatenates n strings.  For example "string1" + "string2" + "string3" results in "string1string2string3".</element_tip>
					<signature>String concatenation.  Example:  "string1" + "string2".</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Logical">
				<ToolTip>Logical Operators</ToolTip>
				<element name="AND">
					<element_tip>Returns TRUE if all argument expressions evaluate to TRUE.</element_tip>
					<signature>Logical AND.  Example:  a AND b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="OR">
					<element_tip>Returns TRUE unless both expressions a and b evaluate to false.</element_tip>
					<signature>Logical OR.  Example:  a OR b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT">
					<element_tip>Returns TRUE if a evaluates to FALSE.</element_tip>
					<signature>Logical NOT.  Example:  NOT a.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="XOR">
					<element_tip>Exclusive or.  Returns FALSE if both a and b are false or if a and b are both TRUE.  That is, returns true when exactly one of a or b evaluates to TRUE.</element_tip>
					<signature>Logical XOR.  Example:  a XOR b.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Other">
				<element name="LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="EXISTS">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Wildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="SingleCharWildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Is">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
	  <ServiceValidation>
		 <!-- There can be only ONE of each of these elements!!! -->
		 <SyntaxServiceName>Siebel Tools Expression Builder</SyntaxServiceName>
		 <SyntaxServiceMethod>ValidateSiebelQueryLanguage</SyntaxServiceMethod>
	  </ServiceValidation>     
	</ExprBuilderType>
	<ExprBuilderType name="Sort">
		<Button order="1">
			<Button_Prefix>AND</Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix>OR</Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix>NOT</Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="4">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Sort Specification field. -->
		<category name="BC Fields">
			<ToolTip>Business component fields</ToolTip>			 			 
			<subcategory name="All" containsFields="true">
				<ToolTip>All fields</ToolTip>			 			 
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field name</element_tip>
					<signature></signature>
				</element>
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
				</element>
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
				</element>
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component">
					<QueryPathStep name="" order="1">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
				</element>
			</subcategory>			
		</category>
		<category name="Ordering">
			<ToolTip>Ordering of records</ToolTip>			 			 
			<subcategory name="All">
				<ToolTip>Ordering methods</ToolTip>			 			 
				<element name="ASCENDING">
					<element_tip>Sort results in ascending order</element_tip>
					<signature></signature>
	                <prefix> (</prefix>
		            <postfix>)</postfix>					
				</element>
				<element name="DESCENDING">
					<element_tip>Sort results in descending order</element_tip>
					<signature></signature>
					<prefix> (</prefix>
					<postfix>)</postfix>
				</element>
			</subcategory>
		</category>
		<ServiceValidation>
			<!-- There can be only ONE of each of these elements!!! -->		
			<SyntaxServiceName>Siebel Tools Expression Builder</SyntaxServiceName>
			<SyntaxServiceMethod>ValidateSortSpec</SyntaxServiceMethod>
	    </ServiceValidation>     
   </ExprBuilderType>
   <ExprBuilderType name="PSP Expression Builder">
		<Button order="1">
			<Button_Prefix>AND</Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix>OR</Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix>NOT</Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="4">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<Button order="5">
			<Button_Prefix>{</Button_Prefix>
			<Button_Postfix>}</Button_Postfix>
			<Button_Tip>Wraps selected text in {}</Button_Tip>
			<Button_Text>{..}</Button_Text>
		</Button>
		<Button order="6">
			<Button_Prefix>"</Button_Prefix>
			<Button_Postfix>"</Button_Postfix>
			<Button_Tip>Wraps selected text in quotation marks</Button_Tip>
			<Button_Text>".."</Button_Text>
		</Button>	
		<Button order="7">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix>,</Button_Postfix>
			<Button_Tip>Inserts a comma</Button_Tip>
			<Button_Text>,</Button_Text>
		</Button>	
		<Button order="8">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix>=</Button_Postfix>
			<Button_Tip>Inserts an equal sign</Button_Tip>
			<Button_Text>=</Button_Text>
		</Button>		
      <!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Search Specification field. -->
      <category name="PSP">
         <subcategory name="Functions">
            <element name="AdjustPrice">
               <element_tip>Applies the specified price adjustment and performs the specified currency conversion.  Returns the updated price.  Example:  AdjustPrice({Row.Net Price}, {Row.Currency Code}, {Match.Adjustment Type}, {Match.Adjustment Amount}, {Match.Currency Code}, {Context.Exchange Date})</element_tip>
               <signature>AdjustPrice (PriceToAdjust, DestinationCurrency, AdjustmentType, AdjustmentAmount, SourceCurrency, ExchangeDate)</signature>
               <prefix></prefix>
               <postfix> (PriceToAdjust, DestinationCurrency, AdjustmentType, AdjustmentAmount, SourceCurrency, ExchangeDate)</postfix>
            </element>
            <element name="ToNumber">
               <element_tip>Converts the specified property or literal to a Number.  Returns the converted value.  Example:  ToNumber({Row.Quantity})</element_tip>
               <signature>ToNumber (Variable)</signature>
               <prefix></prefix>
               <postfix> (String)</postfix>
            </element>
            <element name="ToDate">
               <element_tip>Converts the specified property or literal to a Date.  Returns the converted value.  Example:  ToDate({Context.Exchange Date})</element_tip>
               <signature>ToDate (Variable)</signature>
               <prefix></prefix>
               <postfix> (String)</postfix>
            </element>
            <element name="ToCurrency">
               <element_tip>Converts the specified property or literal to the specified currency.  Returns the converted value.  Example:  ToCurrency({Row.Cost}, {Match.Currency Code})</element_tip>
               <signature>ToCurrency (Variable, Currency)</signature>
               <prefix></prefix>
               <postfix> (String, Currency)</postfix>
            </element>
            <element name="LookUpMessage">
               <element_tip>Returns a translated, substituted message from the UMF.  Example:  LookUpMessage("Pricer - Volume Discount", [Volume Discount] = {Match.Volume Discount Name}, [Quantity] = {Row.Quantity})</element_tip>
               <signature>LookUpMessage(Message Type, Message Type Payload)</signature>
               <prefix></prefix>
               <postfix>(Message Type, Message Type Payload)</postfix>
            </element>
            <element name="GetXA">
               <element_tip>Returns an attribute value for a row.  Example:  GetXA({Row}, 'Color')</element_tip>
               <signature>GetXA(Row, AttributeName)</signature>
               <prefix></prefix>
               <postfix>({Row}, AttributeName)</postfix>
            </element>
            <element name="Sum">
               <element_tip>Returns the sum value of a property across all children of a property set. Example:  Sum({Row Set}, 'Extended Net Price')</element_tip>
               <signature>Sum(PropertySet, PropertyName)</signature>
               <prefix></prefix>
               <postfix>(PropertySet, PropertyName)</postfix>
            </element>
            <element name="Min">
               <element_tip>Returns the minimum value of a property across all children of a property set.  Example:  Min({Row Set}, 'Extended Qty Requested')</element_tip>
               <signature>Min(PropertySet, PropertyName)</signature>
               <prefix></prefix>
               <postfix>(PropertySet, PropertyName)</postfix>
            </element>
            <element name="Max">
               <element_tip>Returns the maximum value of a property across all children of a property set.  Example:  Min({Row Set}, 'Extended Qty Requested')</element_tip>
               <signature>Max(PropertySet, PropertyName)</signature>
               <prefix></prefix>
               <postfix>(PropertySet, PropertyName)</postfix>
            </element>
            <element name="Count">
               <element_tip>Returns the child count of a property set.  Example:  Count({Children})</element_tip>
               <signature>Count(Child Rows)</signature>
               <prefix></prefix>
               <postfix>({Children})</postfix>
            </element>
            <element name="Avg">
               <element_tip>Returns the average value of a property across all children of a property set.  Example:  Avg({Row Set}, 'Extended Net Price')</element_tip>
               <signature>Avg(Propertyset, PropertyName)</signature>
               <prefix></prefix>
               <postfix>(Propertyset, PropertyName)</postfix>
            </element>
            <element name="Round">
               <element_tip>Round a number to the specified decimal places.  Returns the rounded value.  Example Round({Row.Net Price}, {Context.Precision})</element_tip>
               <signature>Round(Number, Precision)</signature>
               <prefix></prefix>
               <postfix>(Number, Precision)</postfix>
            </element>
         </subcategory>
         <subcategory name="PropertySet References">
            <element name="Row Set">
               <element_tip>The input Row Set for the step</element_tip>
               <signature>{Row Set}</signature>
               <prefix>{</prefix>
               <postfix>}</postfix>
            </element>
            <element name="Context">
               <element_tip>The input Context for the step</element_tip>
               <signature>{Context}</signature>
               <prefix>{</prefix>
               <postfix>}</postfix>
            </element>  
            <element name="Output Row Set">
               <element_tip>The optional Output Row Set for the step</element_tip>
               <signature>{Output Row Set}</signature>
               <prefix>{</prefix>
               <postfix>}</postfix>
            </element>
            <element name="Row">
               <element_tip>The row in {Row Set} currently being processed by the transform</element_tip>
               <signature>{Row}</signature>
               <prefix>{</prefix>
               <postfix>}</postfix>
            </element>                 
            <element name="Output">
               <element_tip>The last row added to the Output Row Set</element_tip>
               <signature>{Output}</signature>
               <prefix>{</prefix>
               <postfix>}</postfix>
            </element>  
            <element name="Parent">
               <element_tip>The parent row of {Row}. Only applicable in the Hierarchical Transform</element_tip>
               <signature>{Parent}</signature>
               <prefix>{</prefix>
               <postfix>}</postfix>
            </element> 
            <element name="Children">
               <element_tip>A row set containing all child rows of {Row}.  Only applicable in the Hierarchical Transform</element_tip>
               <signature>{Children}</signature>
               <prefix>{</prefix>
               <postfix>}</postfix>
            </element>             
            <element name="ChildType">
               <element_tip>The child row set of "PropertySet" of type "Child Type".  Example: {Row}.{Net Price Waterfall}</element_tip>
               <signature>{PropertySet}.{ChildType}</signature>
               <prefix>{PropertySet}.{</prefix>
               <postfix>}</postfix>
            </element>                       
         </subcategory>
         <subcategory name="Match">
			<element name="Field">
               <element_tip>Refers to a field on the matched business component record when used with the Simple Lookup or Query Transform.  Example:  {Row.List Price} = {Match.List Price}</element_tip>
               <signature>{Match.FieldName}</signature>
               <prefix>{Match.</prefix>
               <postfix>Name}</postfix>
            </element>       
			<element name="Property">
               <element_tip>Refers to a property on the matched row set when used with the Row Set Lookup Transform.  Example:  {Row.Eligibility Status} = {Match.Eligibility Status}</element_tip>
               <signature>{Match.PropertyName}</signature>
               <prefix>{Match.</prefix>
               <postfix>Name}</postfix>
            </element>             
         </subcategory>  
         <subcategory name="Templates">
			<ToolTip>Commonly used statements</ToolTip>
			<element name="Net Price Waterfall">
                <element_tip>{Row}.{Net Price Waterfall} += New("Waterfall", [Adjustment Amount] = {Match.Adjustment Amount}, [Adjustment Type] = {Match.Adjustment Type}, [Price] = {Row.Net Price}, [Currency Code] = {Row.Currency Code}, [Text] = LookUpMessage ("Pricer - Simple Volume Discount", [Volume Discount] = {Match.Name}))</element_tip>
                <signature></signature>
                <prefix>{Row}.{</prefix>
                <postfix>} += New("Waterfall", [Adjustment Amount] = {Match.Adjustment Amount}, [Adjustment Type] = {Match.Adjustment Type}, [Price] = {Row.Net Price}, [Currency Code] = {Row.Currency Code}, [Text] = LookUpMessage ("Pricer - Simple Volume Discount", [Volume Discount] = {Match.Name}))</postfix>
            </element>                   
         </subcategory>          
         <!-- 
         <subcategory name="Match - Row Set">
         </subcategory>
         -->
         <subcategory name="Actions">
            <element name="+=">
               <element_tip>Within an action, used to move a row from one row set to another, or create a new row in a row set.  Example:  {Output Row Set} += {Row}</element_tip>
               <signature></signature>
               <prefix></prefix>
               <postfix></postfix>
            </element>
            <element name="-=">
               <element_tip>Within an action, used to remove a property from a row, or delete a row from a row set.  Example: {Row} -= {Row.Temp Price} or {Row Set} -= {Row}</element_tip>
               <signature></signature>
               <prefix></prefix>
               <postfix></postfix>
            </element>
            <element name="=">
               <element_tip>Within an action, used to set the value of a property. Example: {Row.List Price} = {Match.List Price}</element_tip>
               <signature>=</signature>
               <prefix></prefix>
               <postfix></postfix>
            </element>
         </subcategory>
         <subcategory name="Message Types">
         <ToolTip>Message Types, for use in the LookUpMessage() function</ToolTip>
         <!-- this subcategory should query the "UMS Type" business component and return the Name of all message types as the elements list -->
			<element name="" appliesTo="Repository WF Step I/O Argument">
				<QueryPathStep name="" order="1" useNewObj="true">
					<BusinessObject>UMS Admin</BusinessObject>
					<BusinessComponent>UMS Type</BusinessComponent>
					<SearchField>Message Type</SearchField>
					<SearchValue></SearchValue>
					<RetrieveField>Name</RetrieveField>
				</QueryPathStep>
				<element_tip></element_tip>
				<signature></signature>
				<prefix>"</prefix>
				<postfix>"</postfix>
			</element>								
         </subcategory>
         <subcategory name="Business Object">
         <ToolTip>For use in the Business Object input argument for the Simple Lookup and Query Transforms</ToolTip>
         <!-- this subcategory should query and return the name of all Repository Business Objects.  When the user double clicks the business object name in the element list, it should add the Business Object Name to the expression.  Tooltip for the element should say 'For use in the Business Object input argument for the Simple Lookup and Query Transforms'-->
			<element name="" appliesTo="Repository WF Step I/O Argument">
				<QueryPathStep name="" order="1" useNewObj="true">
					<BusinessObject>Repository Business Object</BusinessObject>
					<BusinessComponent>Repository Business Object</BusinessComponent>
					<SearchField>Name</SearchField>
					<SearchValue></SearchValue>
					<RetrieveField>Name</RetrieveField>
				</QueryPathStep>
				<element_tip></element_tip>
				<signature></signature>
				<prefix></prefix>
				<postfix></postfix>
			</element>								
         </subcategory>        
         <subcategory name="Business Component">
         <ToolTip>For use in the Business Component input argument for the Simple Lookup and Query Transforms</ToolTip>
         <!-- this subcategory should query and return the name of all Repository Business Components.  When the user double clicks the business component name in the element list, it should add the Business Component Name to the expression.  Tooltip for the element should say 'For use in the Business Component input argument for the Simple Lookup and Query Transforms' -->
			<element name="" appliesTo="Repository WF Step I/O Argument">
				<QueryPathStep name="" order="1" useNewObj="true">
					<BusinessObject>Repository Business Component</BusinessObject>
					<BusinessComponent>Repository Business Component</BusinessComponent>
					<SearchField>Name</SearchField>
					<SearchValue></SearchValue>
					<RetrieveField>Name</RetrieveField>
				</QueryPathStep>
				<element_tip></element_tip>
				<signature></signature>
				<prefix></prefix>
				<postfix></postfix>
			</element>								         
         </subcategory>             
      </category>
	  <category name="BC Fields">
		<!-- SubCategory can be dynamic (see psp variable maps) -->
		<ToolTip>Business component fields, for use in search specification input arguments to Lookup Transforms</ToolTip>
		<subcategory name="" appliesTo="Repository WF Step I/O Argument">
			<ToolTip>Business component</ToolTip>
			<QueryPathStep name="" order="1" useNewObj="true">
				<BusinessObject>Repository Business Component</BusinessObject>
				<BusinessComponent>Repository Business Component</BusinessComponent>
				<SearchField></SearchField>
				<SearchValue></SearchValue>
				<RetrieveField>Name</RetrieveField>
			</QueryPathStep>
			<element name="">
				<QueryPathStep name="" order="1" useNewObj="true">
					<BusinessObject>Repository Business Component</BusinessObject>
					<BusinessComponent>Repository Field</BusinessComponent>
					<SearchField>Parent Name</SearchField>
					<SearchValue basedOn="UncleQueryPathStep" basedOnValue="1"></SearchValue>
					<RetrieveField>Name</RetrieveField>
				</QueryPathStep>
				<element_tip>Business component field</element_tip>
				<signature></signature>
				<prefix>[</prefix>
				<postfix>]</postfix>
			</element>								
		</subcategory>			
	  </category>       
	  <category name="Message Type Payload">
		<!-- SubCategory can be dynamic (see psp variable maps) -->
		<ToolTip>Allows selection of Payload Variables from Message Types, for use in the LookUpMessage PSP Function</ToolTip>
		<subcategory name="" appliesTo="Repository WF Step I/O Argument">
			<ToolTip>Message Type</ToolTip>
			<QueryPathStep name="" order="1" useNewObj="true">
				<BusinessObject>UMS Admin</BusinessObject>
				<BusinessComponent>UMS Type</BusinessComponent>
				<SearchField></SearchField>
				<SearchValue></SearchValue>
				<RetrieveField>Name</RetrieveField>
			</QueryPathStep>			
			<element name="">
				<QueryPathStep name="" order="1" useNewObj="true">
					<BusinessObject>UMS Admin</BusinessObject>
					<BusinessComponent>UMS Type</BusinessComponent>
					<SearchField>Name</SearchField>
					<SearchValue basedOn="UncleQueryPathStep" basedOnValue="1"></SearchValue>
					<RetrieveField>Id</RetrieveField>
				</QueryPathStep>			
				<QueryPathStep name="" order="2" useNewObj="true">
					<BusinessObject>UMS Admin</BusinessObject>
					<BusinessComponent>UMS Type Variable</BusinessComponent>
					<SearchField>UMS Type Id</SearchField>
					<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
					<RetrieveField>Payload Field Name</RetrieveField>
				</QueryPathStep>
				<element_tip>Business component field</element_tip>
				<signature></signature>
				<prefix>[</prefix>
				<postfix>]</postfix>
			</element>								
		</subcategory>			
	  </category>	     	  
	  <category name="Match BC Fields">
		<!-- SubCategory can be dynamic (see psp variable maps) -->
		<ToolTip>For use in referring to fields on matched business component records</ToolTip>
		<subcategory name="" appliesTo="Repository WF Step I/O Argument">
			<ToolTip>Business component</ToolTip>
			<QueryPathStep name="" order="1" useNewObj="true">
				<BusinessObject>Repository Business Component</BusinessObject>
				<BusinessComponent>Repository Business Component</BusinessComponent>
				<SearchField></SearchField>
				<SearchValue></SearchValue>
				<RetrieveField>Name</RetrieveField>
			</QueryPathStep>
			<element name="">
				<QueryPathStep name="" order="1" useNewObj="true">
					<BusinessObject>Repository Business Component</BusinessObject>
					<BusinessComponent>Repository Field</BusinessComponent>
					<SearchField>Parent Name</SearchField>
					<SearchValue basedOn="UncleQueryPathStep" basedOnValue="1"></SearchValue>
					<RetrieveField>Name</RetrieveField>
				</QueryPathStep>
				<element_tip>Business component field</element_tip>
				<signature></signature>
				<prefix>{Match.</prefix>
				<postfix>}</postfix>
			</element>								
		</subcategory>			
	  </category>      
      <category name="Context Variables">
      <ToolTip>Allows selection of variables from all variable maps of type "Context"</ToolTip>
		<subcategory name="" appliesTo="Repository WF Step I/O Argument">
			<ToolTip>Variable Map</ToolTip>
			<QueryPathStep name="" order="1">
				<BusinessObject>Admin Variable VOD Definition EB</BusinessObject>
				<BusinessComponent>Variable Map Type BusComp EB</BusinessComponent>
				<SearchField>Variable Map Type</SearchField>
				<SearchValue>Context</SearchValue>
				<RetrieveField>Object Name</RetrieveField>
			</QueryPathStep>
			<element name="">
				<QueryPathStep name="" order="1">
					<BusinessObject>Admin Variable VOD Definition EB</BusinessObject>
					<BusinessComponent>Variable Definition BusComp EB</BusinessComponent>
					<SearchField>Object Name</SearchField>
					<SearchValue basedOn="UncleQueryPathStep" basedOnValue="1"></SearchValue>
					<RetrieveField>Variable Name</RetrieveField>
				</QueryPathStep>			
				<element_tip></element_tip>
				<signature></signature>
				<prefix>{Context.</prefix>
				<postfix>}</postfix>
			</element>								
		</subcategory>			
      </category>
      <category name="Row Set Variables">
      <ToolTip>Allows selection of variables from all variable maps of type "RowSet"</ToolTip>
		<subcategory name="" appliesTo="Repository WF Step I/O Argument">
			<ToolTip>Variable Map</ToolTip>
			<QueryPathStep name="" order="1">
				<BusinessObject>Admin Variable VOD Definition EB</BusinessObject>
				<BusinessComponent>Variable Map Type BusComp EB</BusinessComponent>
				<SearchField>Variable Map Type</SearchField>
				<SearchValue>RowSet</SearchValue>
				<RetrieveField>Object Name</RetrieveField>
			</QueryPathStep>
			<element name="">
				<QueryPathStep name="" order="1">
					<BusinessObject>Admin Variable VOD Definition EB</BusinessObject>				
					<BusinessComponent>Variable Definition BusComp EB</BusinessComponent>
					<SearchField>Object Name</SearchField>
					<SearchValue basedOn="UncleQueryPathStep" basedOnValue="1"></SearchValue>
					<RetrieveField>Variable Name</RetrieveField>
				</QueryPathStep>			
				<element_tip></element_tip>
				<signature></signature>
				<prefix>{Row.</prefix>
				<postfix>}</postfix>
			</element>								
		</subcategory>			
      </category>     	  
      <category name="Siebel Query Language">
			<subcategory name="String">
				<ToolTip>String functions.</ToolTip>
				<!--				<element name="Mid">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="InStr">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Len">
					<element_tip>Returns the length of a string or string variable.  E.g. Len([First Name]) returns 5 if First Name is "David".</element_tip>
					<signature>Len(fieldname).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Left">
					<element_tip>Returns the leftmost n characters in the text string or field.  E.g. Left("John", 2) returns "Jo".</element_tip>
					<signature>Left (text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Right">
					<element_tip>Returns the right-most n characters in the text string or field.  E.g. Right ("Adams", 2) returns "ms".</element_tip>
					<signature>Right(text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Conditional">
				<ToolTip>Conditional Functions</ToolTip>
				<!--				<element name="BCHasRow">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="IfNull">
					<element_tip>Returns the value of expression1 unless expression1 is NULL, in which case the value of expression2 is returned.</element_tip>
					<signature>IfNull(expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IIF">
					<element_tip>If test_expression is TRUE, returns the value of expr1; otherwise returns the value of expr2.  NOTE: If working with DTYPE_NUMBER fields, the Data Type of expr1 determines the Data Type of the resulting value.</element_tip>
					<signature>IIf (test_expression, expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="InList">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IsPrimary">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IS NOT NULL">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IS NULL">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<subcategory name="LookUp">
				<ToolTip>LookUp functions</ToolTip>
				<!--				<element name="BCName">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Field">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>:</postfix>
				</element>
				<element name="Expr">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>:</postfix>
				</element> -->
				<element name="Currency">
					<element_tip>Returns the currency code for the current position (for example, USD).</element_tip>
					<signature>Currency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="AccountId">
					<element_tip>Returns the current user's Account ID (OU_ID).</element_tip>
					<signature>AccountID().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ContactLoginId">
					<element_tip>Returns the contact ID of the currently logged in user.  If you do not use the contact login method for a Webbased application, the function cannot retrieve any value and returns an empty string. It is recommended that you use the contact login method and an external security authentication service (for example, LDAP).</element_tip>
					<signature>ContactLoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionId">
					<element_tip>Returns the current user's Division ID (BU_ID).  To limit visibility to employees from the same division as the person logged in, add the following to the search specification property of the Applet:  [Division Id] = DivisionId().</element_tip>
					<signature>DivisionId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionName">
					<element_tip>Returns the division name of a user who is an employee.  Use to limit visibility to employees from the same division as the person logged in.  Also use to display the division name of the user logging the service request.  Create a new calculated field so that, when the service request is created, the calculated field displays the division name of the current logged user that is creating the service request. Using the following configuration, the new joined field Reported By Division will be predefaulted to this value, and will never receive another value after this service request creation event.  To create a  calculated field that displays the division name of the current logged user creating a service request:  1 In the Service Request business component, create a new calculated field:  Calculated: TRUE; Calculated Value: DivisionName(); Name: Division (Calc); Parent Name: Service Request; Type: DTYPE_TEXT.2 In the Service Request Business Component, also create a new join to S_SRV_REQ_X table:  Column: ATTRIB_03; Join: S_SRV_REQ_X; Name: Reported By Division; Pre Default Value: Field: 'Division Name'; Read Only: TRUE.  Expose the joined field Reported By Division in the relevant applets.  You may also want to expose the calculated field Division (Calc), just to check the logic and set Visible = False later for the control or list column exposed.</element_tip>
					<signature>DivisionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JobTitle">
					<element_tip>Returns the Job Title of the currently logged-in employee.  Similar to PositionId() and DivisionId().</element_tip>
					<signature>JobTitle().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="FieldValue">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetBCRows">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="Language">
					<element_tip>Returns the language code (for example, ENU) which is the active client language setting, set by the Language parameter in the CFG file, or by the /L parameter when starting a Siebel application.  NOTE: This is not the Resource Language parameter.</element_tip>
					<signature>Language().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LocalCurrency">
					<element_tip>Returns the currency code for this machine (for example, JPY).</element_tip>
					<signature>LocalCurrency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginName">
					<element_tip>Returns login name (for example, BSTEVENS).</element_tip>
					<signature>LoginName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginId">
					<element_tip>Returns login ID (for example, 0-3241).</element_tip>
					<signature>LoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Lookup">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument and the VALUE column matches the value argument.  The function returns the value of the ORDER_BY column for that row.  The primary purpose of the Lookup function is to avoid additional joins in a business component.</element_tip>
					<signature>Lookup(type, value).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupExpr">
					<element_tip>Searches the rows in S_LST_OF_VAL where the TYPE column matches the type argument.  Evaluates the contents of the VALUE column treated as an expression.  Returns the value of the ORDER_BY column for the first row for which the expression evaluates to TRUE.  The LookupExpr function essentially performs an in-memory linear parse evaluate search, so you should  make sure that there are fewer than 30 rows in the LOV type.</element_tip>
					<signature>LookupExpr (type, value_expression).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupName">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language. Returns the language independent code (the CODE column) for the row.  This function is used to obtain the untranslated value in the specified LOV.</element_tip>
					<signature>LookupName (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupValue">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language.  Returns the display value (the VAL column) for the row.  LookupValue tries to find the display value for the specified lang_ind_code.  If not found,  lookupValue just returns the lang_ind_code itself as the value.  This function is used to obtain the translation of the specified untranslated value in the specified LOV into the currently active language.  NOTE: The LookupValue() function cannot be used directly in the Pre Default Value property of a field.  Instead, use a separate calculated field for the lookup, and reference the calculated field in the Pre Default.</element_tip>
					<signature>LookupValue (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationId">
					<element_tip>Returns the organization ID of the currently logged in user.</element_tip>
					<signature>OrganizationId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationName">
					<element_tip>Returns the organization name of a user who is an employee.</element_tip>
					<signature>OrganizationName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionName">
					<element_tip>Returns Position Name of currently logged-in employee.</element_tip>
					<signature>PositionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionId">
					<element_tip>Returns Position ID of currently logged-in employee (for example, 0-4432).</element_tip>
					<signature>PositionId(().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="LookUpTransValue">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookUpTransCode">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookUpTranslation">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="ParentBCName">
					<element_tip>Parent (master) business component name for active link (for example, Opportunity).</element_tip>
					<signature>ParentBCName(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentFieldValue">
					<element_tip>Returns the value of the field_name field in the parent business component.  The result is not typed correctly but is always of type String.  Also, the result does not change if the parent row is updated.  The parent business component field must be exported by using Link Specification = TRUE.</element_tip>
					<signature>ParentFieldValue(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="Preference">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="SystemPreference">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<subcategory name="Date/Time">
				<ToolTip>Date &amp; Time Functions.</ToolTip>
				<element name="JulianDay">
					<element_tip>Equal to the Oracle (and Sagent) Julian Day, for all dates in the 20th and 21st centuries.</element_tip>
					<signature>JulianDay().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianMonth">
					<element_tip>Equal to the JulianYear() * 12 + currentMonth, where January = 1.</element_tip>
					<signature>JulianMonth().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianQtr">
					<element_tip>Equal to the JulianYear() * 4 + currentQuarter, where currentQuarter = (currentMonth - 1) / 3 + 1 rounded down to the next integer.</element_tip>
					<signature>JulianQtr().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianWeek">
					<element_tip>JulianDay() / 7, rounded down to the next integer.</element_tip>
					<signature>JulianWeek().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianYear">
					<element_tip>Equal to the current year + 4713.</element_tip>
					<signature>JulianYear().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="TimeStamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).  The Timestamp function can also be used in queries.  For example:  Created >= Timestamp() - 0.  Against an MS SQL Server database would return those records created within the last one-tenth of a day.</element_tip>
					<signature>TimeStamp().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Today">
					<element_tip>Today's date (for example, 1/26/96, which is January 26, 1996 for the U.S. locale).</element_tip>
					<signature>Today().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="UtcConvert">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<subcategory name="Profile">
				<ToolTip>Profile functions</ToolTip>
				<element name="GetProfileAttr">
					<element_tip>Returns the value stored in the profile attribute if that attribute has been defined. Used in personalization to retrieve values of attributes in a user profile and to pass information from a script to the UI.  Set a session-specific personalization attribute equal to the value of the shared global and reference the personalization attribute in a calculated field.  NOTE: For an undefined attribute or for an attribute that has not been set up, GetProfileAttr returns NULL.  This is important when you are using comparison operators.  For example:  1) GetProfileAttr (Attribute) = "" always returns FALSE either if the Attribute does not exist or exists and the value is different than "".  2) GetProfileAttr (Attribute) IS NULL returns TRUE if the Attribute does not exist and FALSE otherwise.</element_tip>
					<signature>GetProfileAttribute(Attribute).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="GetProfileAttrAsList">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsDate">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsDateTime">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsInt">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsNumber">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsTime">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsUtcDateTime">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>			
		</category>
		<category name="Operators">
			<ToolTip>Operators for expressions</ToolTip>
			<subcategory name="Arithmetic">
				<ToolTip>Arithmetic operators</ToolTip>
				<element name="-">
					<element_tip>Subtraction</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="^">
					<element_tip>Power</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="+">
					<element_tip>Addition</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="*">
					<element_tip>Multiplication</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="/">
					<element_tip>Division</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<!-- <element name="Mod">
					<element_tip>"A Mod B"  returns the integer remainder of "A / B".  For example, "17 Mod 5" returns 2.</element_tip>
					<signature>Modulus.  Example:  A Mod B.</signature>
					<prefix/>
					<postfix/>
				</element>-->
			</subcategory>
			<subcategory name="Comparison">
				<ToolTip>Comparison Operators</ToolTip>
				<element name="=">
					<element_tip>Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;">
					<element_tip>Less Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;">
					<element_tip>Greater Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;&gt;">
					<element_tip>Not Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;=">
					<element_tip>Less Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;=">
					<element_tip>Greater Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NULL">
					<element_tip>Returns TRUE if NULL</element_tip>
					<signature>Is null.  Example:  expression IS NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NOT NULL">
					<element_tip>Returns TRUE if not NULL</element_tip>
					<signature>Is not null.  Example:  expression IS NOT NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Concatenation">
				<ToolTip>String concatenation operators</ToolTip>
				<element name="+">
					<element_tip>Concatenates n strings.  For example "string1" + "string2" + "string3" results in "string1string2string3".</element_tip>
					<signature>String concatenation.  Example:  "string1" + "string2".</signature>
					<prefix/>
					<postfix/>
				</element>
				<!--				<element name="&amp;">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element> -->
			</subcategory>
			<subcategory name="Logical">
				<ToolTip>Logical Operators</ToolTip>
				<element name="AND">
					<element_tip>Returns TRUE if all argument expressions evaluate to TRUE.</element_tip>
					<signature>Logical AND.  Example:  a AND b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="OR">
					<element_tip>Returns TRUE unless both expressions a and b evaluate to false.</element_tip>
					<signature>Logical OR.  Example:  a OR b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT">
					<element_tip>Returns TRUE if a evaluates to FALSE.</element_tip>
					<signature>Logical NOT.  Example:  NOT a.</signature>
					<prefix/>
					<postfix/>
				</element>
				<!--				<element name="EQV">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IMP">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element> -->
				<element name="XOR">
					<element_tip>Exclusive or.  Returns FALSE if both a and b are false or if a and b are both TRUE.  That is, returns true when exactly one of a or b evaluates to TRUE.</element_tip>
					<signature>Logical XOR.  Example:  a XOR b.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Other">
				<element name="LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="EXISTS">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Wildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="SingleCharWildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Is">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>      
		<ServiceValidation>
			<!-- There can be only ONE of each of these elements!!! -->
			<SyntaxServiceName>Row Set Transformation Toolkit</SyntaxServiceName>
			<SyntaxServiceMethod>ValidateExpression</SyntaxServiceMethod>
			<Argument name="Name">
		 		<QueryPathStep name="" order="1">
			 		<BusinessObject>Repository Workflow Process</BusinessObject>
					<BusinessComponent>Repository WF Step I/O Argument</BusinessComponent>
					<SearchField>Id</SearchField>
					<SearchValue basedOn="Id"></SearchValue>
					<RetrieveField>Name</RetrieveField>
				</QueryPathStep>
			</Argument>
		</ServiceValidation>     
   </ExprBuilderType>
   <ExprBuilderType name="PrePostDefault">
		<!-- the name attribute is used to name this button.  Expects: string -->
		<!-- the wrap attribute is used to indicate whether the item to insert,
				when the button is pressed, should enclose the selected text.  This is 
				typical, for example, on a button with text to insert of '[]' (i.e [text]).  
				When pushed the square brackets will wrap the selected text.  When this 
				attribute is true, it is also assumed that the text to insert is at least 
				two characters in length. If wrap is false, the text is simply inserted 
				at the cursor location. Highlighted text will be replaced by the text of
				the button, not wrapped.  
				Expects: true or false -->
		<!-- the order attribute is used to indicate where this button will be placed in
				the toolbar.  Expects: integer -->
		<!-- There can be multiple button nodes.  Each describes a button object. -->
		<Button order="1">
			<Button_Prefix> AND </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> OR </Button_Postfix>
			<Button_Tip>OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix> XOR </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical XOR</Button_Tip>
			<Button_Text>XOR</Button_Text>
		</Button>		
		<Button order="4">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="5">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<Button order="6">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> LIKE </Button_Postfix>
			<Button_Tip>LIKE</Button_Tip>
			<Button_Text>LIKE</Button_Text>
		</Button>
		<Button order="7">
			<Button_Prefix> IS </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IS</Button_Tip>
			<Button_Text>IS</Button_Text>
		</Button>
		<Button order="8">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> NULL </Button_Postfix>
			<Button_Tip>NULL</Button_Tip>
			<Button_Text>NULL</Button_Text>
		</Button>
		<Button order="9">
			<Button_Prefix> IIf </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IIf</Button_Tip>
			<Button_Text>IIf</Button_Text>
		</Button>
		<Button order="10">
			<Button_Prefix> IfNull </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IfNull</Button_Tip>
			<Button_Text>IfNull</Button_Text>
		</Button>
		<Button order="11">
			<Button_Prefix> + </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Addition</Button_Tip>
			<Button_Text>+</Button_Text>
		</Button>
		<Button order="12">
			<Button_Prefix> - </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Subtraction</Button_Tip>
			<Button_Text>-</Button_Text>
		</Button>
		<Button order="13">
			<Button_Prefix> * </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Multiplication</Button_Tip>
			<Button_Text>*</Button_Text>
		</Button>
		<Button order="14">
			<Button_Prefix> / </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Division</Button_Tip>
			<Button_Text>/</Button_Text>
		</Button>
		<!-- <Button order="15">
			<Button_Prefix> MOD </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Modulus</Button_Tip>
			<Button_Text>MOD</Button_Text>
		</Button>-->
		<Button order="16">
			<Button_Prefix> ^ </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Power</Button_Tip>
			<Button_Text>^</Button_Text>
		</Button>
		<Button order="17">
			<Button_Prefix> &lt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Less Than</Button_Tip>
			<Button_Text>&lt;</Button_Text>
		</Button>
		<Button order="18">
			<Button_Prefix> &gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Greater Than</Button_Tip>
			<Button_Text>&gt;</Button_Text>
		</Button>
		<Button order="19">
			<Button_Prefix> &lt;&gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Not Equal To</Button_Tip>
			<Button_Text>&lt;&gt;</Button_Text>
		</Button>
		<Button order="20">
			<Button_Prefix> = </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Equal To</Button_Tip>
			<Button_Text>=</Button_Text>
		</Button>		
		<!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Search Specification field. -->
		<category name="BC Fields">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business component fields</ToolTip>
			<subcategory name="All" containsFields="true">
				<ToolTip>All Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<!-- An element either has a value attribute or a set of QueryPathSteps
					 that will define it - not both. -->
				<!-- appliesTo is REQUIRED for context sensitive elements (if the 
					 subcategory is not static, i.e for those that contain queryPathSteps 
					 if their subcategory is not dynamically generated)  -->
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>				
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>								
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>															
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>				
			</subcategory>
		</category>
		<category name="Functions">
			<ToolTip>Functions for Siebel Calculated Expressions.  Can be used in Calculated Field and Validation field expressions.</ToolTip>
			<subcategory name="String">
				<ToolTip>String functions.</ToolTip>
				<!--				<element name="Mid">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="InStr">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Len">
					<element_tip>Returns the length of a string or string variable.  E.g. Len([First Name]) returns 5 if First Name is "David".</element_tip>
					<signature>Len(fieldname).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Left">
					<element_tip>Returns the leftmost n characters in the text string or field.  E.g. Left("John", 2) returns "Jo".</element_tip>
					<signature>Left (text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Right">
					<element_tip>Returns the right-most n characters in the text string or field.  E.g. Right ("Adams", 2) returns "ms".</element_tip>
					<signature>Right(text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Conditional">
				<ToolTip>Conditional Functions</ToolTip>
				<!--				<element name="BCHasRow">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="IfNull">
					<element_tip>Returns the value of expression1 unless expression1 is NULL, in which case the value of expression2 is returned.</element_tip>
					<signature>IfNull(expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IIF">
					<element_tip>If test_expression is TRUE, returns the value of expr1; otherwise returns the value of expr2.  NOTE: If working with DTYPE_NUMBER fields, the Data Type of expr1 determines the Data Type of the resulting value.</element_tip>
					<signature>IIf (test_expression, expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="InList">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IsPrimary">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IS NOT NULL">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IS NULL">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<subcategory name="LookUp">
				<ToolTip>LookUp functions</ToolTip>
				<!--				<element name="BCName">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Field">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>:</postfix>
				</element>
				<element name="Expr">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>:</postfix>
				</element> -->
				<element name="Currency">
					<element_tip>Returns the currency code for the current position (for example, USD).</element_tip>
					<signature>Currency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="AccountId">
					<element_tip>Returns the current user's Account ID (OU_ID).</element_tip>
					<signature>AccountID().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ContactLoginId">
					<element_tip>Returns the contact ID of the currently logged in user.  If you do not use the contact login method for a Webbased application, the function cannot retrieve any value and returns an empty string. It is recommended that you use the contact login method and an external security authentication service (for example, LDAP).</element_tip>
					<signature>ContactLoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionId">
					<element_tip>Returns the current user's Division ID (BU_ID).  To limit visibility to employees from the same division as the person logged in, add the following to the search specification property of the Applet:  [Division Id] = DivisionId().</element_tip>
					<signature>DivisionId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionName">
					<element_tip>Returns the division name of a user who is an employee.  Use to limit visibility to employees from the same division as the person logged in.  Also use to display the division name of the user logging the service request.  Create a new calculated field so that, when the service request is created, the calculated field displays the division name of the current logged user that is creating the service request. Using the following configuration, the new joined field Reported By Division will be predefaulted to this value, and will never receive another value after this service request creation event.  To create a  calculated field that displays the division name of the current logged user creating a service request:  1 In the Service Request business component, create a new calculated field:  Calculated: TRUE; Calculated Value: DivisionName(); Name: Division (Calc); Parent Name: Service Request; Type: DTYPE_TEXT.2 In the Service Request Business Component, also create a new join to S_SRV_REQ_X table:  Column: ATTRIB_03; Join: S_SRV_REQ_X; Name: Reported By Division; Pre Default Value: Field: 'Division Name'; Read Only: TRUE.  Expose the joined field Reported By Division in the relevant applets.  You may also want to expose the calculated field Division (Calc), just to check the logic and set Visible = False later for the control or list column exposed.</element_tip>
					<signature>DivisionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JobTitle">
					<element_tip>Returns the Job Title of the currently logged-in employee.  Similar to PositionId() and DivisionId().</element_tip>
					<signature>JobTitle().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="FieldValue">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetBCRows">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="Language">
					<element_tip>Returns the language code (for example, ENU) which is the active client language setting, set by the Language parameter in the CFG file, or by the /L parameter when starting a Siebel application.  NOTE: This is not the Resource Language parameter.</element_tip>
					<signature>Language().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LocalCurrency">
					<element_tip>Returns the currency code for this machine (for example, JPY).</element_tip>
					<signature>LocalCurrency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginName">
					<element_tip>Returns login name (for example, BSTEVENS).</element_tip>
					<signature>LoginName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginId">
					<element_tip>Returns login ID (for example, 0-3241).</element_tip>
					<signature>LoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Lookup">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument and the VALUE column matches the value argument.  The function returns the value of the ORDER_BY column for that row.  The primary purpose of the Lookup function is to avoid additional joins in a business component.</element_tip>
					<signature>Lookup(type, value).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupExpr">
					<element_tip>Searches the rows in S_LST_OF_VAL where the TYPE column matches the type argument.  Evaluates the contents of the VALUE column treated as an expression.  Returns the value of the ORDER_BY column for the first row for which the expression evaluates to TRUE.  The LookupExpr function essentially performs an in-memory linear parse evaluate search, so you should  make sure that there are fewer than 30 rows in the LOV type.</element_tip>
					<signature>LookupExpr (type, value_expression).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupName">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language. Returns the language independent code (the CODE column) for the row.  This function is used to obtain the untranslated value in the specified LOV.</element_tip>
					<signature>LookupName (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupValue">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language.  Returns the display value (the VAL column) for the row.  LookupValue tries to find the display value for the specified lang_ind_code.  If not found,  lookupValue just returns the lang_ind_code itself as the value.  This function is used to obtain the translation of the specified untranslated value in the specified LOV into the currently active language.  NOTE: The LookupValue() function cannot be used directly in the Pre Default Value property of a field.  Instead, use a separate calculated field for the lookup, and reference the calculated field in the Pre Default.</element_tip>
					<signature>LookupValue (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationId">
					<element_tip>Returns the organization ID of the currently logged in user.</element_tip>
					<signature>OrganizationId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationName">
					<element_tip>Returns the organization name of a user who is an employee.</element_tip>
					<signature>OrganizationName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionName">
					<element_tip>Returns Position Name of currently logged-in employee.</element_tip>
					<signature>PositionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionId">
					<element_tip>Returns Position ID of currently logged-in employee (for example, 0-4432).</element_tip>
					<signature>PositionId(().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="LookUpTransValue">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookUpTransCode">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookUpTranslation">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="ParentBCName">
					<element_tip>Parent (master) business component name for active link (for example, Opportunity).</element_tip>
					<signature>ParentBCName(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentFieldValue">
					<element_tip>Returns the value of the field_name field in the parent business component.  The result is not typed correctly but is always of type String.  Also, the result does not change if the parent row is updated.  The parent business component field must be exported by using Link Specification = TRUE.</element_tip>
					<signature>ParentFieldValue(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="Preference">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="SystemPreference">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<!--			<subcategory name="Search">
				<ToolTip>Search Functions</ToolTip>
				<element name="FindOneOf">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="FindNoneOf">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory> -->
			<subcategory name="Invocation">
				<ToolTip>Invocation functions</ToolTip>
				<element name="InvokeServiceMethod">
					<element_tip>Invokes a business service from a calculated field and returns [Output Prop].  NOTE: Do not expose a calculated expression that invokes a business service in a list applet.  Doing so may result in poor performance because the business service will be repeatedly instantiated each time the field appears in the list.</element_tip>
					<signature>InvokeServiceMethodInvokeServiceMethod("[ServiceName]","[MethodName]","[InputProp1=val1,InputProp2=val2","[OutputProp]").</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Math">
				<ToolTip>Math functions</ToolTip>
				<element name="Count">
					<element_tip>Returns the number of rows in the multi-value group defined by the MVL mvlink.</element_tip>
					<signature>Count(mvlink).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="LN">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<!--				<element name="Max">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Min">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
				<element name="RowIdToRowIdNum">
					<element_tip>Converts an alphanumeric row ID to a unique, pure numeric row ID in the Service Request business component.  In Siebel eBusiness 6.x, this expression has changed functionality; it is used for the predefault value of the "SR Number" field.</element_tip>
					<signature>RowIdToRowIdNum (Id).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Sum">
					<element_tip>Sums the values from a field in child records into a field in a parent record.  The child record being summed from must be defined as a multivalue field that is part of a multi-value group that is associated with the business component of the field being summed to.</element_tip>
					<signature>Sum (mvfield).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ToChar">
					<element_tip>Returns a string that represents a number or date in a format specified by the optional format parameter.  (For example, ToChar (10, "##.##") returns "10.00").</element_tip>
					<signature>ToChar (number_expression, format).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Date/Time">
				<ToolTip>Date &amp; Time Functions.</ToolTip>
				<element name="JulianDay">
					<element_tip>Equal to the Oracle (and Sagent) Julian Day, for all dates in the 20th and 21st centuries.</element_tip>
					<signature>JulianDay().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianMonth">
					<element_tip>Equal to the JulianYear() * 12 + currentMonth, where January = 1.</element_tip>
					<signature>JulianMonth().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianQtr">
					<element_tip>Equal to the JulianYear() * 4 + currentQuarter, where currentQuarter = (currentMonth - 1) / 3 + 1 rounded down to the next integer.</element_tip>
					<signature>JulianQtr().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianWeek">
					<element_tip>JulianDay() / 7, rounded down to the next integer.</element_tip>
					<signature>JulianWeek().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianYear">
					<element_tip>Equal to the current year + 4713.</element_tip>
					<signature>JulianYear().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="TimeStamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).  The Timestamp function can also be used in queries.  For example:  Created >= Timestamp() - 0.  Against an MS SQL Server database would return those records created within the last one-tenth of a day.</element_tip>
					<signature>TimeStamp().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Today">
					<element_tip>Today's date (for example, 1/26/96, which is January 26, 1996 for the U.S. locale).</element_tip>
					<signature>Today().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="UtcConvert">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<subcategory name="Profile">
				<ToolTip>Profile functions</ToolTip>
				<element name="GetProfileAttr">
					<element_tip>Returns the value stored in the profile attribute if that attribute has been defined. Used in personalization to retrieve values of attributes in a user profile and to pass information from a script to the UI.  Set a session-specific personalization attribute equal to the value of the shared global and reference the personalization attribute in a calculated field.  NOTE: For an undefined attribute or for an attribute that has not been set up, GetProfileAttr returns NULL.  This is important when you are using comparison operators.  For example:  1) GetProfileAttr (Attribute) = "" always returns FALSE either if the Attribute does not exist or exists and the value is different than "".  2) GetProfileAttr (Attribute) IS NULL returns TRUE if the Attribute does not exist and FALSE otherwise.</element_tip>
					<signature>GetProfileAttribute(Attribute).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<!--				<element name="GetProfileAttrAsList">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsDate">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsDateTime">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsInt">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsNumber">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsTime">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetProfileAttrAsUtcDateTime">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element> -->
			</subcategory>
			<!-- <subcategory name="Ext. Attributes">
				<element name="GetXAVal">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetXAValAsDate">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetXAValAsInt">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="GetXAValAsNum">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="XAIsClass">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory> -->
		</category>
		<category name="Keywords">
			<ToolTip>Keywords.</ToolTip>
			<subcategory name="General keywords">
				<ToolTip>General keywords</ToolTip>
				<element name="EXISTS">
					<element_tip/>
					<signature>EXISTS</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Operators">
			<ToolTip>Operators for expressions</ToolTip>
			<subcategory name="Arithmetic">
				<ToolTip>Arithmetic operators</ToolTip>
				<element name="-">
					<element_tip>Subtraction</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="^">
					<element_tip>Power</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="+">
					<element_tip>Addition</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="*">
					<element_tip>Multiplication</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="/">
					<element_tip>Division</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<!-- <element name="Mod">
					<element_tip>"A Mod B"  returns the integer remainder of "A / B".  For example, "17 Mod 5" returns 2.</element_tip>
					<signature>Modulus.  Example:  A Mod B.</signature>
					<prefix/>
					<postfix/>
				</element>-->
			</subcategory>
			<subcategory name="Comparison">
				<ToolTip>Comparison Operators</ToolTip>
				<element name="=">
					<element_tip>Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;">
					<element_tip>Less Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;">
					<element_tip>Greater Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;&gt;">
					<element_tip>Not Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;=">
					<element_tip>Less Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;=">
					<element_tip>Greater Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NULL">
					<element_tip>Returns TRUE if NULL</element_tip>
					<signature>Is null.  Example:  expression IS NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NOT NULL">
					<element_tip>Returns TRUE if not NULL</element_tip>
					<signature>Is not null.  Example:  expression IS NOT NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Concatenation">
				<ToolTip>String concatenation operators</ToolTip>
				<element name="+">
					<element_tip>Concatenates n strings.  For example "string1" + "string2" + "string3" results in "string1string2string3".</element_tip>
					<signature>String concatenation.  Example:  "string1" + "string2".</signature>
					<prefix/>
					<postfix/>
				</element>
				<!--	<element name="&amp;">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element> -->
			</subcategory>
			<subcategory name="Logical">
				<ToolTip>Logical Operators</ToolTip>
				<element name="AND">
					<element_tip>Returns TRUE if all argument expressions evaluate to TRUE.</element_tip>
					<signature>Logical AND.  Example:  a AND b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="OR">
					<element_tip>Returns TRUE unless both expressions a and b evaluate to false.</element_tip>
					<signature>Logical OR.  Example:  a OR b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT">
					<element_tip>Returns TRUE if a evaluates to FALSE.</element_tip>
					<signature>Logical NOT.  Example:  NOT a.</signature>
					<prefix/>
					<postfix/>
				</element>
				<!--				<element name="EQV">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IMP">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element> -->
				<element name="XOR">
					<element_tip>Exclusive or.  Returns FALSE if both a and b are false or if a and b are both TRUE.  That is, returns true when exactly one of a or b evaluates to TRUE.</element_tip>
					<signature>Logical XOR.  Example:  a XOR b.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Other">
				<element name="LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="EXISTS">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Wildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="SingleCharWildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Is">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Predefault and Postdefault Fields">
			<ToolTip>Expressions for Pre- and Postdefault Fields</ToolTip>
			<subcategory name="System expressions">
				<ToolTip>System expressions</ToolTip>
				<element name="System: Creator">
					<element_tip>Login name (for example, BSTEVENS).</element_tip>
					<signature>System: Creator</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: CreatorId">
					<element_tip>Login Id (for example, 0-3241).</element_tip>
					<signature>System: CreatorId</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: OrganizationId">
					<element_tip>Organization ID (for example, 1-24E1).</element_tip>
					<signature>System: OrganizationId</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: OrganizationName">
					<element_tip>Organization name (for example, Siebel Service).</element_tip>
					<signature>System: OrganizationName</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Position">
					<element_tip>Position name (for example, VP of Sales).</element_tip>
					<signature>System: Position</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: PositionId">
					<element_tip>Position Id (for example, 0-4432).</element_tip>
					<signature>System: PositionId</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Today">
					<element_tip>Today's date (for example, 1/26/96).  When using System:  Today as the predefault value for a field, the data type for that field must be DTYPE_DATE.</element_tip>
					<signature>System: Today</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Timestamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).</element_tip>
					<signature>System: Timestamp</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Currency">
					<element_tip>Currency for this position (for example, USD). Determined by the setting for the Currency field in the Divisions or Organizations view under the Group Administration screen.  If the division has a different Currency setting from the organization, the division Currency setting will be used.</element_tip>
					<signature>System: Currency</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: LocalCurrency">
					<element_tip>Currency for this machine (for example, JPY).</element_tip>
					<signature>System: LocalCurrency</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Parent">
				<ToolTip>Parent expressions</ToolTip>
				<element name="Parent: BusComp.Field, BusComp.Field">
					<element_tip>Value in parent business component field.  The field in the parent business component must have Link Specification set to TRUE for values to be defaulted.  You can have multiple "BusComp.Field" constructs separated by commas; the list is checked from first to last until a value is found, for example:  Parent: "ServiceRequest.Account", "Account.Name".  NOTE: A space is required after every comma that separates the fields for this function to work correctly.  If the business component has an apostrophe in its name, you must enclose the name in double quotes, for example:  
Parent: "FINS AG Agent Contracts.Status Of Contract".  You can also terminate a chain of Parent calls with a System call, for example:  Parent: "Opportunity.Currency Code", "Account.Currency Code", System: Currency</element_tip>
					<signature>Parent: "BusComp.Field", "BusComp.Field"</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Field">
				<ToolTip>Field expressions</ToolTip>
				<element name="Field: &quot;FieldName&quot;">
					<element_tip>Value in field in current business component field "FieldName".  
Field: "FieldName" does not work in the Predefault Value property if FieldName is a join field.</element_tip>
					<signature>Field: "FieldName"</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Expr">
				<ToolTip>"Expr" expressions</ToolTip>
				<element name="Expr: 'Today() - 1'">
					<element_tip>Value of expression.  Example: "Expr: Today() - 1".</element_tip>
					<signature>Expr: "Today() - 1"</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Profile Attributes">
			<ToolTip>Profile attributes</ToolTip>		
			<subcategory name="All">
				<ToolTip>All attributes</ToolTip>		
				<element name="" appliesTo="Repository Field">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>			
		</category>		
	  <ServiceValidation>
		 <!-- There can be only ONE of each of these elements!!! -->
		 <SyntaxServiceName></SyntaxServiceName>
		 <SyntaxServiceMethod></SyntaxServiceMethod>
	  </ServiceValidation>     
	</ExprBuilderType>         
   <ExprBuilderType name="BusComp User Props EB">
		<!-- the name attribute is used to name this button.  Expects: string -->
		<!-- the wrap attribute is used to indicate whether the item to insert,
				when the button is pressed, should enclose the selected text.  This is 
				typical, for example, on a button with text to insert of '[]' (i.e [text]).  
				When pushed the square brackets will wrap the selected text.  When this 
				attribute is true, it is also assumed that the text to insert is at least 
				two characters in length. If wrap is false, the text is simply inserted 
				at the cursor location. Highlighted text will be replaced by the text of
				the button, not wrapped.  
				Expects: true or false -->
		<!-- the order attribute is used to indicate where this button will be placed in
				the toolbar.  Expects: integer -->
		<!-- There can be multiple button nodes.  Each describes a button object. -->
		<Button order="1">
			<Button_Prefix> AND </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> OR </Button_Postfix>
			<Button_Tip>OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix> XOR </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical XOR</Button_Tip>
			<Button_Text>XOR</Button_Text>
		</Button>		
		<Button order="4">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="5">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<Button order="6">
			<Button_Prefix>"</Button_Prefix>
			<Button_Postfix>"</Button_Postfix>
			<Button_Tip>Wraps selected text in double quotes</Button_Tip>
			<Button_Text>".."</Button_Text>
		</Button>
		<Button order="7">
			<Button_Prefix>'</Button_Prefix>
			<Button_Postfix>'</Button_Postfix>
			<Button_Tip>Wraps selected text in single quotes</Button_Tip>
			<Button_Text>'..'</Button_Text>
		</Button>
		<Button order="8">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> LIKE </Button_Postfix>
			<Button_Tip>LIKE</Button_Tip>
			<Button_Text>LIKE</Button_Text>
		</Button>
		<Button order="9">
			<Button_Prefix> IS </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IS</Button_Tip>
			<Button_Text>IS</Button_Text>
		</Button>
		<Button order="10">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> NULL </Button_Postfix>
			<Button_Tip>NULL</Button_Tip>
			<Button_Text>NULL</Button_Text>
		</Button>
		<Button order="11">
			<Button_Prefix> IIf </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IIf</Button_Tip>
			<Button_Text>IIf</Button_Text>
		</Button>
		<Button order="12">
			<Button_Prefix> IfNull </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IfNull</Button_Tip>
			<Button_Text>IfNull</Button_Text>
		</Button>
		<Button order="13">
			<Button_Prefix> + </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Addition</Button_Tip>
			<Button_Text>+</Button_Text>
		</Button>
		<Button order="14">
			<Button_Prefix> - </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Subtraction</Button_Tip>
			<Button_Text>-</Button_Text>
		</Button>
		<Button order="15">
			<Button_Prefix> * </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Multiplication</Button_Tip>
			<Button_Text>*</Button_Text>
		</Button>
		<Button order="16">
			<Button_Prefix> / </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Division</Button_Tip>
			<Button_Text>/</Button_Text>
		</Button>
		<!-- <Button order="17">
			<Button_Prefix> MOD </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Modulus</Button_Tip>
			<Button_Text>MOD</Button_Text>
		</Button>-->
		<Button order="18">
			<Button_Prefix> ^ </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Power</Button_Tip>
			<Button_Text>^</Button_Text>
		</Button>
		<Button order="19">
			<Button_Prefix> &lt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Less Than</Button_Tip>
			<Button_Text>&lt;</Button_Text>
		</Button>
		<Button order="20">
			<Button_Prefix> &gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Greater Than</Button_Tip>
			<Button_Text>&gt;</Button_Text>
		</Button>
		<Button order="21">
			<Button_Prefix> &lt;&gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Not Equal To</Button_Tip>
			<Button_Text>&lt;&gt;</Button_Text>
		</Button>
		<Button order="22">
			<Button_Prefix> = </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Equal To</Button_Tip>
			<Button_Text>=</Button_Text>
		</Button>		
		<Button order="23">
			<Button_Prefix> TRUE </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical True</Button_Tip>
			<Button_Text>TRUE</Button_Text>
		</Button>
		<Button order="24">
			<Button_Prefix> FALSE </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical False</Button_Tip>
			<Button_Text>FALSE</Button_Text>
		</Button>				
		<!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Search Specification field. -->
		<category name="BC Fields">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business component fields</ToolTip>
			<subcategory name="All" containsFields="true">
				<ToolTip>All Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<!-- An element either has a value attribute or a set of QueryPathSteps
					 that will define it - not both. -->
				<!-- appliesTo is REQUIRED for context sensitive elements (if the 
					 subcategory is not static, i.e for those that contain queryPathSteps 
					 if their subcategory is not dynamically generated)  -->
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>				
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>								
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>															
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>				
			</subcategory>
		</category>
		<category name="BC Fields (No Wrapping)">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business component fields (no wrapping)</ToolTip>
			<subcategory name="All" containsFields="true">
				<ToolTip>All Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<!-- An element either has a value attribute or a set of QueryPathSteps
					 that will define it - not both. -->
				<!-- appliesTo is REQUIRED for context sensitive elements (if the 
					 subcategory is not static, i.e for those that contain queryPathSteps 
					 if their subcategory is not dynamically generated)  -->
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>				
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>								
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>															
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>				
			</subcategory>
		</category>
		<category name="Business Components">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business Components</ToolTip>
			<subcategory name="All">
			<ToolTip>All Business Components</ToolTip>
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Business Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip></element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>								         
			</subcategory>             
		</category>
	    <category name="Business Object Components">
		   <ToolTip>Business Object Components</ToolTip>
		   <subcategory name="" appliesTo="Repository Business Component User Prop">
			  <ToolTip>Business Object</ToolTip>
			  <QueryPathStep name="" order="1" useNewObj="true">
				 <BusinessObject>Repository Business Object</BusinessObject>
				 <BusinessComponent>Repository Business Object</BusinessComponent>
				 <SearchField></SearchField>
				 <SearchValue></SearchValue>
				 <RetrieveField>Name</RetrieveField>
			  </QueryPathStep>
			  <element name="">
				  <QueryPathStep name="" order="1" useNewObj="true">
					  <BusinessObject>Repository Business Object</BusinessObject>
					  <BusinessComponent>Repository Business Object Component</BusinessComponent>
					  <SearchField>Parent Name</SearchField>
					  <SearchValue basedOn="UncleQueryPathStep" basedOnValue="1"></SearchValue>
					  <RetrieveField>Name</RetrieveField>
				  </QueryPathStep>
				  <element_tip>Business Component</element_tip>
				  <signature></signature>
				  <prefix></prefix>
				  <postfix></postfix>
			  </element>								
		   </subcategory>			
	    </category>       
		<category name="Business Objects">
			<ToolTip>Business Objects</ToolTip>
			<subcategory name="All">
			<ToolTip>All Business Objects</ToolTip>
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Object</BusinessObject>
						<BusinessComponent>Repository Business Object</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip></element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>								         
			</subcategory>             
		</category>
		<category name="Business Services">
			<ToolTip>Business Services</ToolTip>
			<subcategory name="All">
			<ToolTip>All Business Services</ToolTip>
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Service</BusinessObject>
						<BusinessComponent>Repository Business Service</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip></element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>								         
			</subcategory>             
		</category>
	    <category name="Business Service Methods">
		   <ToolTip>Business Service Methods</ToolTip>
		   <subcategory name="" appliesTo="Repository Business Component User prop">
			  <ToolTip>Business Service</ToolTip>
			  <QueryPathStep name="" order="1" useNewObj="true">
				 <BusinessObject>Repository Business Service</BusinessObject>
				 <BusinessComponent>Repository Business Service</BusinessComponent>
				 <SearchField></SearchField>
				 <SearchValue></SearchValue>
				 <RetrieveField>Name</RetrieveField>
			  </QueryPathStep>
			  <element name="">
				  <QueryPathStep name="" order="1" useNewObj="true">
					  <BusinessObject>Repository Business Service</BusinessObject>
					  <BusinessComponent>Repository Business Service Method</BusinessComponent>
					  <SearchField>Parent Name</SearchField>
					  <SearchValue basedOn="UncleQueryPathStep" basedOnValue="1"></SearchValue>
					  <RetrieveField>Name</RetrieveField>
				  </QueryPathStep>
				  <element_tip>Business Service Method</element_tip>
				  <signature></signature>
				  <prefix></prefix>
				  <postfix></postfix>
			  </element>								
		   </subcategory>			
	    </category>       
		<category name="Workflows">
			<ToolTip>Workflow Processes</ToolTip>
			<subcategory name="All">
			<ToolTip>All Workflow Processes</ToolTip>
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Workflow Process</BusinessObject>
						<BusinessComponent>Repository Workflow Process</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip></element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>								         
			</subcategory>             
		</category>	    	    				
		<category name="Functions">
			<ToolTip>Functions for Siebel Calculated Expressions.  Can be used in Calculated Field and Validation field expressions.</ToolTip>
			<subcategory name="String">
				<ToolTip>String functions.</ToolTip>
				<element name="InStr">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Len">
					<element_tip>Returns the length of a string or string variable.  E.g. Len([First Name]) returns 5 if First Name is "David".</element_tip>
					<signature>Len(fieldname).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Left">
					<element_tip>Returns the leftmost n characters in the text string or field.  E.g. Left("John", 2) returns "Jo".</element_tip>
					<signature>Left (text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Right">
					<element_tip>Returns the right-most n characters in the text string or field.  E.g. Right ("Adams", 2) returns "ms".</element_tip>
					<signature>Right(text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Conditional">
				<ToolTip>Conditional Functions</ToolTip>
				<element name="IfNull">
					<element_tip>Returns the value of expression1 unless expression1 is NULL, in which case the value of expression2 is returned.</element_tip>
					<signature>IfNull(expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IIF">
					<element_tip>If test_expression is TRUE, returns the value of expr1; otherwise returns the value of expr2.  NOTE: If working with DTYPE_NUMBER fields, the Data Type of expr1 determines the Data Type of the resulting value.</element_tip>
					<signature>IIf (test_expression, expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="LookUp">
				<ToolTip>LookUp functions</ToolTip>
				<element name="Currency">
					<element_tip>Returns the currency code for the current position (for example, USD).</element_tip>
					<signature>Currency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="AccountId">
					<element_tip>Returns the current user's Account ID (OU_ID).</element_tip>
					<signature>AccountID().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ContactLoginId">
					<element_tip>Returns the contact ID of the currently logged in user.  If you do not use the contact login method for a Webbased application, the function cannot retrieve any value and returns an empty string. It is recommended that you use the contact login method and an external security authentication service (for example, LDAP).</element_tip>
					<signature>ContactLoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionId">
					<element_tip>Returns the current user's Division ID (BU_ID).  To limit visibility to employees from the same division as the person logged in, add the following to the search specification property of the Applet:  [Division Id] = DivisionId().</element_tip>
					<signature>DivisionId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionName">
					<element_tip>Returns the division name of a user who is an employee.  Use to limit visibility to employees from the same division as the person logged in.  Also use to display the division name of the user logging the service request.  Create a new calculated field so that, when the service request is created, the calculated field displays the division name of the current logged user that is creating the service request. Using the following configuration, the new joined field Reported By Division will be predefaulted to this value, and will never receive another value after this service request creation event.  To create a  calculated field that displays the division name of the current logged user creating a service request:  1 In the Service Request business component, create a new calculated field:  Calculated: TRUE; Calculated Value: DivisionName(); Name: Division (Calc); Parent Name: Service Request; Type: DTYPE_TEXT.2 In the Service Request Business Component, also create a new join to S_SRV_REQ_X table:  Column: ATTRIB_03; Join: S_SRV_REQ_X; Name: Reported By Division; Pre Default Value: Field: 'Division Name'; Read Only: TRUE.  Expose the joined field Reported By Division in the relevant applets.  You may also want to expose the calculated field Division (Calc), just to check the logic and set Visible = False later for the control or list column exposed.</element_tip>
					<signature>DivisionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JobTitle">
					<element_tip>Returns the Job Title of the currently logged-in employee.  Similar to PositionId() and DivisionId().</element_tip>
					<signature>JobTitle().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Language">
					<element_tip>Returns the language code (for example, ENU) which is the active client language setting, set by the Language parameter in the CFG file, or by the /L parameter when starting a Siebel application.  NOTE: This is not the Resource Language parameter.</element_tip>
					<signature>Language().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LocalCurrency">
					<element_tip>Returns the currency code for this machine (for example, JPY).</element_tip>
					<signature>LocalCurrency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginName">
					<element_tip>Returns login name (for example, BSTEVENS).</element_tip>
					<signature>LoginName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginId">
					<element_tip>Returns login ID (for example, 0-3241).</element_tip>
					<signature>LoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Lookup">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument and the VALUE column matches the value argument.  The function returns the value of the ORDER_BY column for that row.  The primary purpose of the Lookup function is to avoid additional joins in a business component.</element_tip>
					<signature>Lookup(type, value).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupExpr">
					<element_tip>Searches the rows in S_LST_OF_VAL where the TYPE column matches the type argument.  Evaluates the contents of the VALUE column treated as an expression.  Returns the value of the ORDER_BY column for the first row for which the expression evaluates to TRUE.  The LookupExpr function essentially performs an in-memory linear parse evaluate search, so you should  make sure that there are fewer than 30 rows in the LOV type.</element_tip>
					<signature>LookupExpr (type, value_expression).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupName">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language. Returns the language independent code (the CODE column) for the row.  This function is used to obtain the untranslated value in the specified LOV.</element_tip>
					<signature>LookupName (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupValue">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language.  Returns the display value (the VAL column) for the row.  LookupValue tries to find the display value for the specified lang_ind_code.  If not found,  lookupValue just returns the lang_ind_code itself as the value.  This function is used to obtain the translation of the specified untranslated value in the specified LOV into the currently active language.  NOTE: The LookupValue() function cannot be used directly in the Pre Default Value property of a field.  Instead, use a separate calculated field for the lookup, and reference the calculated field in the Pre Default.</element_tip>
					<signature>LookupValue (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationId">
					<element_tip>Returns the organization ID of the currently logged in user.</element_tip>
					<signature>OrganizationId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationName">
					<element_tip>Returns the organization name of a user who is an employee.</element_tip>
					<signature>OrganizationName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionName">
					<element_tip>Returns Position Name of currently logged-in employee.</element_tip>
					<signature>PositionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionId">
					<element_tip>Returns Position ID of currently logged-in employee (for example, 0-4432).</element_tip>
					<signature>PositionId(().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentBCName">
					<element_tip>Parent (master) business component name for active link (for example, Opportunity).</element_tip>
					<signature>ParentBCName(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentFieldValue">
					<element_tip>Returns the value of the field_name field in the parent business component.  The result is not typed correctly but is always of type String.  Also, the result does not change if the parent row is updated.  The parent business component field must be exported by using Link Specification = TRUE.</element_tip>
					<signature>ParentFieldValue(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Invocation">
				<ToolTip>Invocation functions</ToolTip>
				<element name="InvokeServiceMethod">
					<element_tip>Invokes a business service from a calculated field and returns [Output Prop].  NOTE: Do not expose a calculated expression that invokes a business service in a list applet.  Doing so may result in poor performance because the business service will be repeatedly instantiated each time the field appears in the list.</element_tip>
					<signature>InvokeServiceMethodInvokeServiceMethod("[ServiceName]","[MethodName]","[InputProp1=val1,InputProp2=val2","[OutputProp]").</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Math">
				<ToolTip>Math functions</ToolTip>
				<element name="Count">
					<element_tip>Returns the number of rows in the multi-value group defined by the MVL mvlink.</element_tip>
					<signature>Count(mvlink).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="RowIdToRowIdNum">
					<element_tip>Converts an alphanumeric row ID to a unique, pure numeric row ID in the Service Request business component.  In Siebel eBusiness 6.x, this expression has changed functionality; it is used for the predefault value of the "SR Number" field.</element_tip>
					<signature>RowIdToRowIdNum (Id).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Sum">
					<element_tip>Sums the values from a field in child records into a field in a parent record.  The child record being summed from must be defined as a multivalue field that is part of a multi-value group that is associated with the business component of the field being summed to.</element_tip>
					<signature>Sum (mvfield).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ToChar">
					<element_tip>Returns a string that represents a number or date in a format specified by the optional format parameter.  (For example, ToChar (10, "##.##") returns "10.00").</element_tip>
					<signature>ToChar (number_expression, format).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Date/Time">
				<ToolTip>Date &amp; Time Functions.</ToolTip>
				<element name="JulianDay">
					<element_tip>Equal to the Oracle (and Sagent) Julian Day, for all dates in the 20th and 21st centuries.</element_tip>
					<signature>JulianDay().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianMonth">
					<element_tip>Equal to the JulianYear() * 12 + currentMonth, where January = 1.</element_tip>
					<signature>JulianMonth().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianQtr">
					<element_tip>Equal to the JulianYear() * 4 + currentQuarter, where currentQuarter = (currentMonth - 1) / 3 + 1 rounded down to the next integer.</element_tip>
					<signature>JulianQtr().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianWeek">
					<element_tip>JulianDay() / 7, rounded down to the next integer.</element_tip>
					<signature>JulianWeek().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianYear">
					<element_tip>Equal to the current year + 4713.</element_tip>
					<signature>JulianYear().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="TimeStamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).  The Timestamp function can also be used in queries.  For example:  Created >= Timestamp() - 0.  Against an MS SQL Server database would return those records created within the last one-tenth of a day.</element_tip>
					<signature>TimeStamp().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Today">
					<element_tip>Today's date (for example, 1/26/96, which is January 26, 1996 for the U.S. locale).</element_tip>
					<signature>Today().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Profile">
				<ToolTip>Profile functions</ToolTip>
				<element name="GetProfileAttr">
					<element_tip>Returns the value stored in the profile attribute if that attribute has been defined. Used in personalization to retrieve values of attributes in a user profile and to pass information from a script to the UI.  Set a session-specific personalization attribute equal to the value of the shared global and reference the personalization attribute in a calculated field.  NOTE: For an undefined attribute or for an attribute that has not been set up, GetProfileAttr returns NULL.  This is important when you are using comparison operators.  For example:  1) GetProfileAttr (Attribute) = "" always returns FALSE either if the Attribute does not exist or exists and the value is different than "".  2) GetProfileAttr (Attribute) IS NULL returns TRUE if the Attribute does not exist and FALSE otherwise.</element_tip>
					<signature>GetProfileAttribute(Attribute).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Keywords">
			<ToolTip>Keywords.</ToolTip>
			<subcategory name="General keywords">
				<ToolTip>General keywords</ToolTip>
				<element name="EXISTS">
					<element_tip/>
					<signature>EXISTS</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Operators">
			<ToolTip>Operators for expressions</ToolTip>
			<subcategory name="Arithmetic">
				<ToolTip>Arithmetic operators</ToolTip>
				<element name="-">
					<element_tip>Subtraction</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="^">
					<element_tip>Power</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="+">
					<element_tip>Addition</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="*">
					<element_tip>Multiplication</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="/">
					<element_tip>Division</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<!-- <element name="Mod">
					<element_tip>"A Mod B"  returns the integer remainder of "A / B".  For example, "17 Mod 5" returns 2.</element_tip>
					<signature>Modulus.  Example:  A Mod B.</signature>
					<prefix/>
					<postfix/>
				</element>-->
			</subcategory>
			<subcategory name="Comparison">
				<ToolTip>Comparison Operators</ToolTip>
				<element name="=">
					<element_tip>Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;">
					<element_tip>Less Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;">
					<element_tip>Greater Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;&gt;">
					<element_tip>Not Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;=">
					<element_tip>Less Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;=">
					<element_tip>Greater Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NULL">
					<element_tip>Returns TRUE if NULL</element_tip>
					<signature>Is null.  Example:  expression IS NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NOT NULL">
					<element_tip>Returns TRUE if not NULL</element_tip>
					<signature>Is not null.  Example:  expression IS NOT NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Concatenation">
				<ToolTip>String concatenation operators</ToolTip>
				<element name="+">
					<element_tip>Concatenates n strings.  For example "string1" + "string2" + "string3" results in "string1string2string3".</element_tip>
					<signature>String concatenation.  Example:  "string1" + "string2".</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Logical">
				<ToolTip>Logical Operators</ToolTip>
				<element name="AND">
					<element_tip>Returns TRUE if all argument expressions evaluate to TRUE.</element_tip>
					<signature>Logical AND.  Example:  a AND b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="OR">
					<element_tip>Returns TRUE unless both expressions a and b evaluate to false.</element_tip>
					<signature>Logical OR.  Example:  a OR b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT">
					<element_tip>Returns TRUE if a evaluates to FALSE.</element_tip>
					<signature>Logical NOT.  Example:  NOT a.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="XOR">
					<element_tip>Exclusive or.  Returns FALSE if both a and b are false or if a and b are both TRUE.  That is, returns true when exactly one of a or b evaluates to TRUE.</element_tip>
					<signature>Logical XOR.  Example:  a XOR b.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Other">
				<element name="LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="EXISTS">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Wildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="SingleCharWildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Is">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Predefault and Postdefault Fields">
			<ToolTip>Expressions for Pre- and Postdefault Fields</ToolTip>
			<subcategory name="System expressions">
				<ToolTip>System expressions</ToolTip>
				<element name="System: Creator">
					<element_tip>Login name (for example, BSTEVENS).</element_tip>
					<signature>System: Creator</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: CreatorId">
					<element_tip>Login Id (for example, 0-3241).</element_tip>
					<signature>System: CreatorId</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: OrganizationId">
					<element_tip>Organization ID (for example, 1-24E1).</element_tip>
					<signature>System: OrganizationId</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: OrganizationName">
					<element_tip>Organization name (for example, Siebel Service).</element_tip>
					<signature>System: OrganizationName</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Position">
					<element_tip>Position name (for example, VP of Sales).</element_tip>
					<signature>System: Position</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: PositionId">
					<element_tip>Position Id (for example, 0-4432).</element_tip>
					<signature>System: PositionId</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Today">
					<element_tip>Today's date (for example, 1/26/96).  When using System:  Today as the predefault value for a field, the data type for that field must be DTYPE_DATE.</element_tip>
					<signature>System: Today</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Timestamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).</element_tip>
					<signature>System: Timestamp</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Currency">
					<element_tip>Currency for this position (for example, USD). Determined by the setting for the Currency field in the Divisions or Organizations view under the Group Administration screen.  If the division has a different Currency setting from the organization, the division Currency setting will be used.</element_tip>
					<signature>System: Currency</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: LocalCurrency">
					<element_tip>Currency for this machine (for example, JPY).</element_tip>
					<signature>System: LocalCurrency</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Parent">
				<ToolTip>Parent expressions</ToolTip>
				<element name="Parent: BusComp.Field, BusComp.Field">
					<element_tip>Value in parent business component field.  The field in the parent business component must have Link Specification set to TRUE for values to be defaulted.  You can have multiple "BusComp.Field" constructs separated by commas; the list is checked from first to last until a value is found, for example:  Parent: "ServiceRequest.Account", "Account.Name".  NOTE: A space is required after every comma that separates the fields for this function to work correctly.  If the business component has an apostrophe in its name, you must enclose the name in double quotes, for example:  
Parent: "FINS AG Agent Contracts.Status Of Contract".  You can also terminate a chain of Parent calls with a System call, for example:  Parent: "Opportunity.Currency Code", "Account.Currency Code", System: Currency</element_tip>
					<signature>Parent: "BusComp.Field", "BusComp.Field"</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Field">
				<ToolTip>Field expressions</ToolTip>
				<element name="Field: &quot;FieldName&quot;">
					<element_tip>Value in field in current business component field "FieldName".  
Field: "FieldName" does not work in the Predefault Value property if FieldName is a join field.</element_tip>
					<signature>Field: "FieldName"</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Expr">
				<ToolTip>"Expr" expressions</ToolTip>
				<element name="Expr: 'Today() - 1'">
					<element_tip>Value of expression.  Example: "Expr: Today() - 1".</element_tip>
					<signature>Expr: "Today() - 1"</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Profile Attributes">
			<ToolTip>Profile attributes</ToolTip>		
			<subcategory name="All">
				<ToolTip>All attributes</ToolTip>		
				<element name="" appliesTo="Repository Business Component User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>			
		</category>		
	  <ServiceValidation>
		 <!-- There can be only ONE of each of these elements!!! -->
		 <SyntaxServiceName></SyntaxServiceName>
		 <SyntaxServiceMethod></SyntaxServiceMethod>
	  </ServiceValidation>     
	</ExprBuilderType>         	
	<ExprBuilderType name="Applet User Props EB">
		<!-- the name attribute is used to name this button.  Expects: string -->
		<!-- the wrap attribute is used to indicate whether the item to insert,
				when the button is pressed, should enclose the selected text.  This is 
				typical, for example, on a button with text to insert of '[]' (i.e [text]).  
				When pushed the square brackets will wrap the selected text.  When this 
				attribute is true, it is also assumed that the text to insert is at least 
				two characters in length. If wrap is false, the text is simply inserted 
				at the cursor location. Highlighted text will be replaced by the text of
				the button, not wrapped.  
				Expects: true or false -->
		<!-- the order attribute is used to indicate where this button will be placed in
				the toolbar.  Expects: integer -->
		<!-- There can be multiple button nodes.  Each describes a button object. -->
		<Button order="1">
			<Button_Prefix> AND </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> OR </Button_Postfix>
			<Button_Tip>Logical OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix> XOR </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical XOR</Button_Tip>
			<Button_Text>XOR</Button_Text>
		</Button>
		<Button order="4">
			<Button_Prefix> NOT </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="5">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<Button order="6">
			<Button_Prefix>"</Button_Prefix>
			<Button_Postfix>"</Button_Postfix>
			<Button_Tip>Wraps selected text in double quotes</Button_Tip>
			<Button_Text>".."</Button_Text>
		</Button>
		<Button order="7">
			<Button_Prefix>'</Button_Prefix>
			<Button_Postfix>'</Button_Postfix>
			<Button_Tip>Wraps selected text in single quotes</Button_Tip>
			<Button_Text>'..'</Button_Text>
		</Button>
		<Button order="8">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> LIKE </Button_Postfix>
			<Button_Tip>LIKE</Button_Tip>
			<Button_Text>LIKE</Button_Text>
		</Button>
		<Button order="9">
			<Button_Prefix> IS </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IS</Button_Tip>
			<Button_Text>IS</Button_Text>
		</Button>
		<Button order="10">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> NULL </Button_Postfix>
			<Button_Tip>NULL</Button_Tip>
			<Button_Text>NULL</Button_Text>
		</Button>
		<Button order="11">
			<Button_Prefix> IIf </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IIf</Button_Tip>
			<Button_Text>IIf</Button_Text>
		</Button>
		<Button order="12">
			<Button_Prefix> IfNull </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IfNull</Button_Tip>
			<Button_Text>IfNull</Button_Text>
		</Button>
		<Button order="13">
			<Button_Prefix> + </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Addition</Button_Tip>
			<Button_Text>+</Button_Text>
		</Button>
		<Button order="14">
			<Button_Prefix> - </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Subtraction</Button_Tip>
			<Button_Text>-</Button_Text>
		</Button>
		<Button order="15">
			<Button_Prefix> * </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Multiplication</Button_Tip>
			<Button_Text>*</Button_Text>
		</Button>
		<Button order="16">
			<Button_Prefix> / </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Division</Button_Tip>
			<Button_Text>/</Button_Text>
		</Button>
		<!-- <Button order="17">
			<Button_Prefix> MOD </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Modulus</Button_Tip>
			<Button_Text>MOD</Button_Text>
		</Button>-->
		<Button order="18">
			<Button_Prefix> ^ </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Power</Button_Tip>
			<Button_Text>^</Button_Text>
		</Button>
		<Button order="19">
			<Button_Prefix> &lt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Less Than</Button_Tip>
			<Button_Text>&lt;</Button_Text>
		</Button>
		<Button order="20">
			<Button_Prefix> &gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Greater Than</Button_Tip>
			<Button_Text>&gt;</Button_Text>
		</Button>
		<Button order="21">
			<Button_Prefix> &lt;&gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Not Equal To</Button_Tip>
			<Button_Text>&lt;&gt;</Button_Text>
		</Button>
		<Button order="22">
			<Button_Prefix> = </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Equal To</Button_Tip>
			<Button_Text>=</Button_Text>
		</Button>		
		<Button order="23">
			<Button_Prefix> TRUE </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical True</Button_Tip>
			<Button_Text>TRUE</Button_Text>
		</Button>
		<Button order="24">
			<Button_Prefix> FALSE </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical False</Button_Tip>
			<Button_Text>FALSE</Button_Text>
		</Button>						
		<!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Search Specification field. -->
		<category name="BC Fields">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business component fields</ToolTip>
			<subcategory name="All" containsFields="true">
				<ToolTip>All Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<!-- An element either has a value attribute or a set of QueryPathSteps
					 that will define it - not both. -->
				<!-- appliesTo is REQUIRED for context sensitive elements (if the 
					 subcategory is not static, i.e for those that contain queryPathSteps 
					 if their subcategory is not dynamically generated)  -->
				<element name="" appliesTo="Repository Applet User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Applet User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Applet User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<element name="" appliesTo="Repository Applet User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Business Object Components">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business Components</ToolTip>
			<subcategory name="Current">
			<ToolTip>Business components that belong to the current business object</ToolTip>
				<element name="" appliesTo="Repository Applet User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Object</BusinessObject>
						<BusinessComponent>Repository Business Object Component</BusinessComponent>
						<SearchField>Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Parent Id</RetrieveField>
					</QueryPathStep>
					<QueryPathStep name="" order="3" useNewObj="true">
						<BusinessObject>Repository Business Object</BusinessObject>
						<BusinessComponent>Repository Business Object Component</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="2"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>										
					<element_tip>Business Component</element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>								         
			</subcategory>             
		</category>
		<category name="Web Pages">
			<ToolTip>Web Pages</ToolTip>
			<subcategory name="All">
			<ToolTip>All Web Pages</ToolTip>
				<element name="" appliesTo="Repository Applet User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Web Page</BusinessObject>
						<BusinessComponent>Repository Web Page</BusinessComponent>
						<SearchField></SearchField>
						<SearchValue></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip></element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>								         
			</subcategory>             
		</category>
		<category name="Applet Controls">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Applet Controls</ToolTip>
			<subcategory name="All">
			<ToolTip>All controls that belong to the current Applet</ToolTip>
				<element name="" appliesTo="Repository Applet User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Control</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="Parent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>	
					<element_tip></element_tip>
					<signature></signature>
					<prefix></prefix>
					<postfix></postfix>
				</element>								         
			</subcategory>             
		</category>
		<category name="Functions">
			<ToolTip>Functions for Siebel Calculated Expressions.  Can be used in Calculated Field and Validation field expressions.</ToolTip>
			<subcategory name="String">
				<ToolTip>String functions.</ToolTip>
				<element name="InStr">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Len">
					<element_tip>Returns the length of a string or string variable.  E.g. Len([First Name]) returns 5 if First Name is "David".</element_tip>
					<signature>Len(fieldname).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Left">
					<element_tip>Returns the leftmost n characters in the text string or field.  E.g. Left("John", 2) returns "Jo".</element_tip>
					<signature>Left (text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Right">
					<element_tip>Returns the right-most n characters in the text string or field.  E.g. Right ("Adams", 2) returns "ms".</element_tip>
					<signature>Right(text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Conditional">
				<ToolTip>Conditional Functions</ToolTip>
				<element name="IfNull">
					<element_tip>Returns the value of expression1 unless expression1 is NULL, in which case the value of expression2 is returned.</element_tip>
					<signature>IfNull(expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IIF">
					<element_tip>If test_expression is TRUE, returns the value of expr1; otherwise returns the value of expr2.  NOTE: If working with DTYPE_NUMBER fields, the Data Type of expr1 determines the Data Type of the resulting value.</element_tip>
					<signature>IIf (test_expression, expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="LookUp">
				<ToolTip>LookUp functions</ToolTip>
				<element name="Currency">
					<element_tip>Returns the currency code for the current position (for example, USD).</element_tip>
					<signature>Currency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="AccountId">
					<element_tip>Returns the current user's Account ID (OU_ID).</element_tip>
					<signature>AccountID().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ContactLoginId">
					<element_tip>Returns the contact ID of the currently logged in user.  If you do not use the contact login method for a Webbased application, the function cannot retrieve any value and returns an empty string. It is recommended that you use the contact login method and an external security authentication service (for example, LDAP).</element_tip>
					<signature>ContactLoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionId">
					<element_tip>Returns the current user's Division ID (BU_ID).  To limit visibility to employees from the same division as the person logged in, add the following to the search specification property of the Applet:  [Division Id] = DivisionId().</element_tip>
					<signature>DivisionId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionName">
					<element_tip>Returns the division name of a user who is an employee.  Use to limit visibility to employees from the same division as the person logged in.  Also use to display the division name of the user logging the service request.  Create a new calculated field so that, when the service request is created, the calculated field displays the division name of the current logged user that is creating the service request. Using the following configuration, the new joined field Reported By Division will be predefaulted to this value, and will never receive another value after this service request creation event.  To create a  calculated field that displays the division name of the current logged user creating a service request:  1 In the Service Request business component, create a new calculated field:  Calculated: TRUE; Calculated Value: DivisionName(); Name: Division (Calc); Parent Name: Service Request; Type: DTYPE_TEXT.2 In the Service Request Business Component, also create a new join to S_SRV_REQ_X table:  Column: ATTRIB_03; Join: S_SRV_REQ_X; Name: Reported By Division; Pre Default Value: Field: 'Division Name'; Read Only: TRUE.  Expose the joined field Reported By Division in the relevant applets.  You may also want to expose the calculated field Division (Calc), just to check the logic and set Visible = False later for the control or list column exposed.</element_tip>
					<signature>DivisionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JobTitle">
					<element_tip>Returns the Job Title of the currently logged-in employee.  Similar to PositionId() and DivisionId().</element_tip>
					<signature>JobTitle().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Language">
					<element_tip>Returns the language code (for example, ENU) which is the active client language setting, set by the Language parameter in the CFG file, or by the /L parameter when starting a Siebel application.  NOTE: This is not the Resource Language parameter.</element_tip>
					<signature>Language().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LocalCurrency">
					<element_tip>Returns the currency code for this machine (for example, JPY).</element_tip>
					<signature>LocalCurrency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginName">
					<element_tip>Returns login name (for example, BSTEVENS).</element_tip>
					<signature>LoginName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginId">
					<element_tip>Returns login ID (for example, 0-3241).</element_tip>
					<signature>LoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Lookup">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument and the VALUE column matches the value argument.  The function returns the value of the ORDER_BY column for that row.  The primary purpose of the Lookup function is to avoid additional joins in a business component.</element_tip>
					<signature>Lookup(type, value).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupExpr">
					<element_tip>Searches the rows in S_LST_OF_VAL where the TYPE column matches the type argument.  Evaluates the contents of the VALUE column treated as an expression.  Returns the value of the ORDER_BY column for the first row for which the expression evaluates to TRUE.  The LookupExpr function essentially performs an in-memory linear parse evaluate search, so you should  make sure that there are fewer than 30 rows in the LOV type.</element_tip>
					<signature>LookupExpr (type, value_expression).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupName">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language. Returns the language independent code (the CODE column) for the row.  This function is used to obtain the untranslated value in the specified LOV.</element_tip>
					<signature>LookupName (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupValue">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language.  Returns the display value (the VAL column) for the row.  LookupValue tries to find the display value for the specified lang_ind_code.  If not found,  lookupValue just returns the lang_ind_code itself as the value.  This function is used to obtain the translation of the specified untranslated value in the specified LOV into the currently active language.  NOTE: The LookupValue() function cannot be used directly in the Pre Default Value property of a field.  Instead, use a separate calculated field for the lookup, and reference the calculated field in the Pre Default.</element_tip>
					<signature>LookupValue (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationId">
					<element_tip>Returns the organization ID of the currently logged in user.</element_tip>
					<signature>OrganizationId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationName">
					<element_tip>Returns the organization name of a user who is an employee.</element_tip>
					<signature>OrganizationName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionName">
					<element_tip>Returns Position Name of currently logged-in employee.</element_tip>
					<signature>PositionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionId">
					<element_tip>Returns Position ID of currently logged-in employee (for example, 0-4432).</element_tip>
					<signature>PositionId(().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentBCName">
					<element_tip>Parent (master) business component name for active link (for example, Opportunity).</element_tip>
					<signature>ParentBCName(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentFieldValue">
					<element_tip>Returns the value of the field_name field in the parent business component.  The result is not typed correctly but is always of type String.  Also, the result does not change if the parent row is updated.  The parent business component field must be exported by using Link Specification = TRUE.</element_tip>
					<signature>ParentFieldValue(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Invocation">
				<ToolTip>Invocation functions</ToolTip>
				<element name="InvokeServiceMethod">
					<element_tip>Invokes a business service from a calculated field and returns [Output Prop].  NOTE: Do not expose a calculated expression that invokes a business service in a list applet.  Doing so may result in poor performance because the business service will be repeatedly instantiated each time the field appears in the list.</element_tip>
					<signature>InvokeServiceMethodInvokeServiceMethod("[ServiceName]","[MethodName]","[InputProp1=val1,InputProp2=val2","[OutputProp]").</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Math">
				<ToolTip>Math functions</ToolTip>
				<element name="Count">
					<element_tip>Returns the number of rows in the multi-value group defined by the MVL mvlink.</element_tip>
					<signature>Count(mvlink).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="RowIdToRowIdNum">
					<element_tip>Converts an alphanumeric row ID to a unique, pure numeric row ID in the Service Request business component.  In Siebel eBusiness 6.x, this expression has changed functionality; it is used for the predefault value of the "SR Number" field.</element_tip>
					<signature>RowIdToRowIdNum (Id).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Sum">
					<element_tip>Sums the values from a field in child records into a field in a parent record.  The child record being summed from must be defined as a multivalue field that is part of a multi-value group that is associated with the business component of the field being summed to.</element_tip>
					<signature>Sum (mvfield).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ToChar">
					<element_tip>Returns a string that represents a number or date in a format specified by the optional format parameter.  (For example, ToChar (10, "##.##") returns "10.00").</element_tip>
					<signature>ToChar (number_expression, format).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Date/Time">
				<ToolTip>Date &amp; Time Functions.</ToolTip>
				<element name="JulianDay">
					<element_tip>Equal to the Oracle (and Sagent) Julian Day, for all dates in the 20th and 21st centuries.</element_tip>
					<signature>JulianDay().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianMonth">
					<element_tip>Equal to the JulianYear() * 12 + currentMonth, where January = 1.</element_tip>
					<signature>JulianMonth().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianQtr">
					<element_tip>Equal to the JulianYear() * 4 + currentQuarter, where currentQuarter = (currentMonth - 1) / 3 + 1 rounded down to the next integer.</element_tip>
					<signature>JulianQtr().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianWeek">
					<element_tip>JulianDay() / 7, rounded down to the next integer.</element_tip>
					<signature>JulianWeek().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianYear">
					<element_tip>Equal to the current year + 4713.</element_tip>
					<signature>JulianYear().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="TimeStamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).  The Timestamp function can also be used in queries.  For example:  Created >= Timestamp() - 0.  Against an MS SQL Server database would return those records created within the last one-tenth of a day.</element_tip>
					<signature>TimeStamp().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Today">
					<element_tip>Today's date (for example, 1/26/96, which is January 26, 1996 for the U.S. locale).</element_tip>
					<signature>Today().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Profile">
				<ToolTip>Profile functions</ToolTip>
				<element name="GetProfileAttr">
					<element_tip>Returns the value stored in the profile attribute if that attribute has been defined. Used in personalization to retrieve values of attributes in a user profile and to pass information from a script to the UI.  Set a session-specific personalization attribute equal to the value of the shared global and reference the personalization attribute in a calculated field.  NOTE: For an undefined attribute or for an attribute that has not been set up, GetProfileAttr returns NULL.  This is important when you are using comparison operators.  For example:  1) GetProfileAttr (Attribute) = "" always returns FALSE either if the Attribute does not exist or exists and the value is different than "".  2) GetProfileAttr (Attribute) IS NULL returns TRUE if the Attribute does not exist and FALSE otherwise.</element_tip>
					<signature>GetProfileAttribute(Attribute).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Keywords">
			<ToolTip>Keywords.</ToolTip>
			<subcategory name="General keywords">
				<ToolTip>General keywords</ToolTip>
				<element name="EXISTS">
					<element_tip/>
					<signature>EXISTS</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Operators">
			<ToolTip>Operators for expressions</ToolTip>
			<subcategory name="Arithmetic">
				<ToolTip>Arithmetic operators</ToolTip>
				<element name="-">
					<element_tip>Subtraction</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="^">
					<element_tip>Power</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="+">
					<element_tip>Addition</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="*">
					<element_tip>Multiplication</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="/">
					<element_tip>Division</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<!-- <element name="Mod">
					<element_tip>"A Mod B"  returns the integer remainder of "A / B".  For example, "17 Mod 5" returns 2.</element_tip>
					<signature>Modulus.  Example:  A Mod B.</signature>
					<prefix/>
					<postfix/>
				</element>-->
			</subcategory>
			<subcategory name="Comparison">
				<ToolTip>Comparison Operators</ToolTip>
				<element name="=">
					<element_tip>Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;">
					<element_tip>Less Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;">
					<element_tip>Greater Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;&gt;">
					<element_tip>Not Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;=">
					<element_tip>Less Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;=">
					<element_tip>Greater Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NULL">
					<element_tip>Returns TRUE if NULL</element_tip>
					<signature>Is null.  Example:  expression IS NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NOT NULL">
					<element_tip>Returns TRUE if not NULL</element_tip>
					<signature>Is not null.  Example:  expression IS NOT NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Concatenation">
				<ToolTip>String concatenation operators</ToolTip>
				<element name="+">
					<element_tip>Concatenates n strings.  For example "string1" + "string2" + "string3" results in "string1string2string3".</element_tip>
					<signature>String concatenation.  Example:  "string1" + "string2".</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Logical">
				<ToolTip>Logical Operators</ToolTip>
				<element name="AND">
					<element_tip>Returns TRUE if all argument expressions evaluate to TRUE.</element_tip>
					<signature>Logical AND.  Example:  a AND b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="OR">
					<element_tip>Returns TRUE unless both expressions a and b evaluate to false.</element_tip>
					<signature>Logical OR.  Example:  a OR b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT">
					<element_tip>Returns TRUE if a evaluates to FALSE.</element_tip>
					<signature>Logical NOT.  Example:  NOT a.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="XOR">
					<element_tip>Exclusive or.  Returns FALSE if both a and b are false or if a and b are both TRUE.  That is, returns true when exactly one of a or b evaluates to TRUE.</element_tip>
					<signature>Logical XOR.  Example:  a XOR b.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Other">
				<element name="LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="EXISTS">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Wildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="SingleCharWildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Is">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Profile Attributes">
			<ToolTip>Profile attributes</ToolTip>		
			<subcategory name="All">
				<ToolTip>All attributes</ToolTip>		
				<element name="" appliesTo="Repository Applet User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>			
	    </category>
	  <ServiceValidation>
		 <!-- There can be only ONE of each of these elements!!! -->
		 <SyntaxServiceName></SyntaxServiceName>
		 <SyntaxServiceMethod></SyntaxServiceMethod>
	  </ServiceValidation>     
	</ExprBuilderType>	
   <ExprBuilderType name="Field User Props EB">
		<!-- the name attribute is used to name this button.  Expects: string -->
		<!-- the wrap attribute is used to indicate whether the item to insert,
				when the button is pressed, should enclose the selected text.  This is 
				typical, for example, on a button with text to insert of '[]' (i.e [text]).  
				When pushed the square brackets will wrap the selected text.  When this 
				attribute is true, it is also assumed that the text to insert is at least 
				two characters in length. If wrap is false, the text is simply inserted 
				at the cursor location. Highlighted text will be replaced by the text of
				the button, not wrapped.  
				Expects: true or false -->
		<!-- the order attribute is used to indicate where this button will be placed in
				the toolbar.  Expects: integer -->
		<!-- There can be multiple button nodes.  Each describes a button object. -->
		<Button order="1">
			<Button_Prefix> AND </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> OR </Button_Postfix>
			<Button_Tip>OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix> XOR </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical XOR</Button_Tip>
			<Button_Text>XOR</Button_Text>
		</Button>		
		<Button order="4">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="5">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<Button order="6">
			<Button_Prefix>"</Button_Prefix>
			<Button_Postfix>"</Button_Postfix>
			<Button_Tip>Wraps selected text in double quotes</Button_Tip>
			<Button_Text>".."</Button_Text>
		</Button>
		<Button order="7">
			<Button_Prefix>'</Button_Prefix>
			<Button_Postfix>'</Button_Postfix>
			<Button_Tip>Wraps selected text in single quotes</Button_Tip>
			<Button_Text>'..'</Button_Text>
		</Button>
		<Button order="8">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> LIKE </Button_Postfix>
			<Button_Tip>LIKE</Button_Tip>
			<Button_Text>LIKE</Button_Text>
		</Button>
		<Button order="9">
			<Button_Prefix> IS </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IS</Button_Tip>
			<Button_Text>IS</Button_Text>
		</Button>
		<Button order="10">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> NULL </Button_Postfix>
			<Button_Tip>NULL</Button_Tip>
			<Button_Text>NULL</Button_Text>
		</Button>
		<Button order="11">
			<Button_Prefix> IIf </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IIf</Button_Tip>
			<Button_Text>IIf</Button_Text>
		</Button>
		<Button order="12">
			<Button_Prefix> IfNull </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IfNull</Button_Tip>
			<Button_Text>IfNull</Button_Text>
		</Button>
		<Button order="13">
			<Button_Prefix> + </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Addition</Button_Tip>
			<Button_Text>+</Button_Text>
		</Button>
		<Button order="14">
			<Button_Prefix> - </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Subtraction</Button_Tip>
			<Button_Text>-</Button_Text>
		</Button>
		<Button order="15">
			<Button_Prefix> * </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Multiplication</Button_Tip>
			<Button_Text>*</Button_Text>
		</Button>
		<Button order="16">
			<Button_Prefix> / </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Division</Button_Tip>
			<Button_Text>/</Button_Text>
		</Button>
		<!-- <Button order="17">
			<Button_Prefix> MOD </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Modulus</Button_Tip>
			<Button_Text>MOD</Button_Text>
		</Button>-->
		<Button order="18">
			<Button_Prefix> ^ </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Power</Button_Tip>
			<Button_Text>^</Button_Text>
		</Button>
		<Button order="19">
			<Button_Prefix> &lt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Less Than</Button_Tip>
			<Button_Text>&lt;</Button_Text>
		</Button>
		<Button order="20">
			<Button_Prefix> &gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Greater Than</Button_Tip>
			<Button_Text>&gt;</Button_Text>
		</Button>
		<Button order="21">
			<Button_Prefix> &lt;&gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Not Equal To</Button_Tip>
			<Button_Text>&lt;&gt;</Button_Text>
		</Button>
		<Button order="22">
			<Button_Prefix> = </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Equal To</Button_Tip>
			<Button_Text>=</Button_Text>
		</Button>		
		<Button order="23">
			<Button_Prefix> TRUE </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical True</Button_Tip>
			<Button_Text>TRUE</Button_Text>
		</Button>
		<Button order="24">
			<Button_Prefix> FALSE </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical False</Button_Tip>
			<Button_Text>FALSE</Button_Text>
		</Button>				
		<!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Search Specification field. -->
		<category name="BC Fields">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business component fields</ToolTip>
			<subcategory name="All" containsFields="true">
				<ToolTip>All Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<!-- An element either has a value attribute or a set of QueryPathSteps
					 that will define it - not both. -->
				<!-- appliesTo is REQUIRED for context sensitive elements (if the 
					 subcategory is not static, i.e for those that contain queryPathSteps 
					 if their subcategory is not dynamically generated)  -->
				<element name="" appliesTo="Repository Field User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>	
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Field User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>	
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Field User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>	
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<element name="" appliesTo="Repository Field User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>	
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Functions">
			<ToolTip>Functions for Siebel Calculated Expressions.  Can be used in Calculated Field and Validation field expressions.</ToolTip>
			<subcategory name="String">
				<ToolTip>String functions.</ToolTip>
				<element name="InStr">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Len">
					<element_tip>Returns the length of a string or string variable.  E.g. Len([First Name]) returns 5 if First Name is "David".</element_tip>
					<signature>Len(fieldname).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Left">
					<element_tip>Returns the leftmost n characters in the text string or field.  E.g. Left("John", 2) returns "Jo".</element_tip>
					<signature>Left (text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Right">
					<element_tip>Returns the right-most n characters in the text string or field.  E.g. Right ("Adams", 2) returns "ms".</element_tip>
					<signature>Right(text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Conditional">
				<ToolTip>Conditional Functions</ToolTip>
				<element name="IfNull">
					<element_tip>Returns the value of expression1 unless expression1 is NULL, in which case the value of expression2 is returned.</element_tip>
					<signature>IfNull(expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IIF">
					<element_tip>If test_expression is TRUE, returns the value of expr1; otherwise returns the value of expr2.  NOTE: If working with DTYPE_NUMBER fields, the Data Type of expr1 determines the Data Type of the resulting value.</element_tip>
					<signature>IIf (test_expression, expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="LookUp">
				<ToolTip>LookUp functions</ToolTip>
				<element name="Currency">
					<element_tip>Returns the currency code for the current position (for example, USD).</element_tip>
					<signature>Currency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="AccountId">
					<element_tip>Returns the current user's Account ID (OU_ID).</element_tip>
					<signature>AccountID().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ContactLoginId">
					<element_tip>Returns the contact ID of the currently logged in user.  If you do not use the contact login method for a Webbased application, the function cannot retrieve any value and returns an empty string. It is recommended that you use the contact login method and an external security authentication service (for example, LDAP).</element_tip>
					<signature>ContactLoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionId">
					<element_tip>Returns the current user's Division ID (BU_ID).  To limit visibility to employees from the same division as the person logged in, add the following to the search specification property of the Applet:  [Division Id] = DivisionId().</element_tip>
					<signature>DivisionId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionName">
					<element_tip>Returns the division name of a user who is an employee.  Use to limit visibility to employees from the same division as the person logged in.  Also use to display the division name of the user logging the service request.  Create a new calculated field so that, when the service request is created, the calculated field displays the division name of the current logged user that is creating the service request. Using the following configuration, the new joined field Reported By Division will be predefaulted to this value, and will never receive another value after this service request creation event.  To create a  calculated field that displays the division name of the current logged user creating a service request:  1 In the Service Request business component, create a new calculated field:  Calculated: TRUE; Calculated Value: DivisionName(); Name: Division (Calc); Parent Name: Service Request; Type: DTYPE_TEXT.2 In the Service Request Business Component, also create a new join to S_SRV_REQ_X table:  Column: ATTRIB_03; Join: S_SRV_REQ_X; Name: Reported By Division; Pre Default Value: Field: 'Division Name'; Read Only: TRUE.  Expose the joined field Reported By Division in the relevant applets.  You may also want to expose the calculated field Division (Calc), just to check the logic and set Visible = False later for the control or list column exposed.</element_tip>
					<signature>DivisionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JobTitle">
					<element_tip>Returns the Job Title of the currently logged-in employee.  Similar to PositionId() and DivisionId().</element_tip>
					<signature>JobTitle().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Language">
					<element_tip>Returns the language code (for example, ENU) which is the active client language setting, set by the Language parameter in the CFG file, or by the /L parameter when starting a Siebel application.  NOTE: This is not the Resource Language parameter.</element_tip>
					<signature>Language().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LocalCurrency">
					<element_tip>Returns the currency code for this machine (for example, JPY).</element_tip>
					<signature>LocalCurrency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginName">
					<element_tip>Returns login name (for example, BSTEVENS).</element_tip>
					<signature>LoginName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginId">
					<element_tip>Returns login ID (for example, 0-3241).</element_tip>
					<signature>LoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Lookup">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument and the VALUE column matches the value argument.  The function returns the value of the ORDER_BY column for that row.  The primary purpose of the Lookup function is to avoid additional joins in a business component.</element_tip>
					<signature>Lookup(type, value).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupExpr">
					<element_tip>Searches the rows in S_LST_OF_VAL where the TYPE column matches the type argument.  Evaluates the contents of the VALUE column treated as an expression.  Returns the value of the ORDER_BY column for the first row for which the expression evaluates to TRUE.  The LookupExpr function essentially performs an in-memory linear parse evaluate search, so you should  make sure that there are fewer than 30 rows in the LOV type.</element_tip>
					<signature>LookupExpr (type, value_expression).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupName">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language. Returns the language independent code (the CODE column) for the row.  This function is used to obtain the untranslated value in the specified LOV.</element_tip>
					<signature>LookupName (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupValue">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language.  Returns the display value (the VAL column) for the row.  LookupValue tries to find the display value for the specified lang_ind_code.  If not found,  lookupValue just returns the lang_ind_code itself as the value.  This function is used to obtain the translation of the specified untranslated value in the specified LOV into the currently active language.  NOTE: The LookupValue() function cannot be used directly in the Pre Default Value property of a field.  Instead, use a separate calculated field for the lookup, and reference the calculated field in the Pre Default.</element_tip>
					<signature>LookupValue (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationId">
					<element_tip>Returns the organization ID of the currently logged in user.</element_tip>
					<signature>OrganizationId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationName">
					<element_tip>Returns the organization name of a user who is an employee.</element_tip>
					<signature>OrganizationName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionName">
					<element_tip>Returns Position Name of currently logged-in employee.</element_tip>
					<signature>PositionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionId">
					<element_tip>Returns Position ID of currently logged-in employee (for example, 0-4432).</element_tip>
					<signature>PositionId(().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentBCName">
					<element_tip>Parent (master) business component name for active link (for example, Opportunity).</element_tip>
					<signature>ParentBCName(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentFieldValue">
					<element_tip>Returns the value of the field_name field in the parent business component.  The result is not typed correctly but is always of type String.  Also, the result does not change if the parent row is updated.  The parent business component field must be exported by using Link Specification = TRUE.</element_tip>
					<signature>ParentFieldValue(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Invocation">
				<ToolTip>Invocation functions</ToolTip>
				<element name="InvokeServiceMethod">
					<element_tip>Invokes a business service from a calculated field and returns [Output Prop].  NOTE: Do not expose a calculated expression that invokes a business service in a list applet.  Doing so may result in poor performance because the business service will be repeatedly instantiated each time the field appears in the list.</element_tip>
					<signature>InvokeServiceMethodInvokeServiceMethod("[ServiceName]","[MethodName]","[InputProp1=val1,InputProp2=val2","[OutputProp]").</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Math">
				<ToolTip>Math functions</ToolTip>
				<element name="Count">
					<element_tip>Returns the number of rows in the multi-value group defined by the MVL mvlink.</element_tip>
					<signature>Count(mvlink).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="RowIdToRowIdNum">
					<element_tip>Converts an alphanumeric row ID to a unique, pure numeric row ID in the Service Request business component.  In Siebel eBusiness 6.x, this expression has changed functionality; it is used for the predefault value of the "SR Number" field.</element_tip>
					<signature>RowIdToRowIdNum (Id).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Sum">
					<element_tip>Sums the values from a field in child records into a field in a parent record.  The child record being summed from must be defined as a multivalue field that is part of a multi-value group that is associated with the business component of the field being summed to.</element_tip>
					<signature>Sum (mvfield).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ToChar">
					<element_tip>Returns a string that represents a number or date in a format specified by the optional format parameter.  (For example, ToChar (10, "##.##") returns "10.00").</element_tip>
					<signature>ToChar (number_expression, format).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Date/Time">
				<ToolTip>Date &amp; Time Functions.</ToolTip>
				<element name="JulianDay">
					<element_tip>Equal to the Oracle (and Sagent) Julian Day, for all dates in the 20th and 21st centuries.</element_tip>
					<signature>JulianDay().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianMonth">
					<element_tip>Equal to the JulianYear() * 12 + currentMonth, where January = 1.</element_tip>
					<signature>JulianMonth().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianQtr">
					<element_tip>Equal to the JulianYear() * 4 + currentQuarter, where currentQuarter = (currentMonth - 1) / 3 + 1 rounded down to the next integer.</element_tip>
					<signature>JulianQtr().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianWeek">
					<element_tip>JulianDay() / 7, rounded down to the next integer.</element_tip>
					<signature>JulianWeek().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianYear">
					<element_tip>Equal to the current year + 4713.</element_tip>
					<signature>JulianYear().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="TimeStamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).  The Timestamp function can also be used in queries.  For example:  Created >= Timestamp() - 0.  Against an MS SQL Server database would return those records created within the last one-tenth of a day.</element_tip>
					<signature>TimeStamp().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Today">
					<element_tip>Today's date (for example, 1/26/96, which is January 26, 1996 for the U.S. locale).</element_tip>
					<signature>Today().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Profile">
				<ToolTip>Profile functions</ToolTip>
				<element name="GetProfileAttr">
					<element_tip>Returns the value stored in the profile attribute if that attribute has been defined. Used in personalization to retrieve values of attributes in a user profile and to pass information from a script to the UI.  Set a session-specific personalization attribute equal to the value of the shared global and reference the personalization attribute in a calculated field.  NOTE: For an undefined attribute or for an attribute that has not been set up, GetProfileAttr returns NULL.  This is important when you are using comparison operators.  For example:  1) GetProfileAttr (Attribute) = "" always returns FALSE either if the Attribute does not exist or exists and the value is different than "".  2) GetProfileAttr (Attribute) IS NULL returns TRUE if the Attribute does not exist and FALSE otherwise.</element_tip>
					<signature>GetProfileAttribute(Attribute).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Keywords">
			<ToolTip>Keywords.</ToolTip>
			<subcategory name="General keywords">
				<ToolTip>General keywords</ToolTip>
				<element name="EXISTS">
					<element_tip/>
					<signature>EXISTS</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Operators">
			<ToolTip>Operators for expressions</ToolTip>
			<subcategory name="Arithmetic">
				<ToolTip>Arithmetic operators</ToolTip>
				<element name="-">
					<element_tip>Subtraction</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="^">
					<element_tip>Power</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="+">
					<element_tip>Addition</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="*">
					<element_tip>Multiplication</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="/">
					<element_tip>Division</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<!-- <element name="Mod">
					<element_tip>"A Mod B"  returns the integer remainder of "A / B".  For example, "17 Mod 5" returns 2.</element_tip>
					<signature>Modulus.  Example:  A Mod B.</signature>
					<prefix/>
					<postfix/>
				</element>-->
			</subcategory>
			<subcategory name="Comparison">
				<ToolTip>Comparison Operators</ToolTip>
				<element name="=">
					<element_tip>Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;">
					<element_tip>Less Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;">
					<element_tip>Greater Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;&gt;">
					<element_tip>Not Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;=">
					<element_tip>Less Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;=">
					<element_tip>Greater Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NULL">
					<element_tip>Returns TRUE if NULL</element_tip>
					<signature>Is null.  Example:  expression IS NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NOT NULL">
					<element_tip>Returns TRUE if not NULL</element_tip>
					<signature>Is not null.  Example:  expression IS NOT NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Concatenation">
				<ToolTip>String concatenation operators</ToolTip>
				<element name="+">
					<element_tip>Concatenates n strings.  For example "string1" + "string2" + "string3" results in "string1string2string3".</element_tip>
					<signature>String concatenation.  Example:  "string1" + "string2".</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Logical">
				<ToolTip>Logical Operators</ToolTip>
				<element name="AND">
					<element_tip>Returns TRUE if all argument expressions evaluate to TRUE.</element_tip>
					<signature>Logical AND.  Example:  a AND b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="OR">
					<element_tip>Returns TRUE unless both expressions a and b evaluate to false.</element_tip>
					<signature>Logical OR.  Example:  a OR b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT">
					<element_tip>Returns TRUE if a evaluates to FALSE.</element_tip>
					<signature>Logical NOT.  Example:  NOT a.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="XOR">
					<element_tip>Exclusive or.  Returns FALSE if both a and b are false or if a and b are both TRUE.  That is, returns true when exactly one of a or b evaluates to TRUE.</element_tip>
					<signature>Logical XOR.  Example:  a XOR b.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Other">
				<element name="LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="EXISTS">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Wildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="SingleCharWildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Is">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Predefault and Postdefault Fields">
			<ToolTip>Expressions for Pre- and Postdefault Fields</ToolTip>
			<subcategory name="System expressions">
				<ToolTip>System expressions</ToolTip>
				<element name="System: Creator">
					<element_tip>Login name (for example, BSTEVENS).</element_tip>
					<signature>System: Creator</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: CreatorId">
					<element_tip>Login Id (for example, 0-3241).</element_tip>
					<signature>System: CreatorId</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: OrganizationId">
					<element_tip>Organization ID (for example, 1-24E1).</element_tip>
					<signature>System: OrganizationId</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: OrganizationName">
					<element_tip>Organization name (for example, Siebel Service).</element_tip>
					<signature>System: OrganizationName</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Position">
					<element_tip>Position name (for example, VP of Sales).</element_tip>
					<signature>System: Position</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: PositionId">
					<element_tip>Position Id (for example, 0-4432).</element_tip>
					<signature>System: PositionId</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Today">
					<element_tip>Today's date (for example, 1/26/96).  When using System:  Today as the predefault value for a field, the data type for that field must be DTYPE_DATE.</element_tip>
					<signature>System: Today</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Timestamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).</element_tip>
					<signature>System: Timestamp</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: Currency">
					<element_tip>Currency for this position (for example, USD). Determined by the setting for the Currency field in the Divisions or Organizations view under the Group Administration screen.  If the division has a different Currency setting from the organization, the division Currency setting will be used.</element_tip>
					<signature>System: Currency</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="System: LocalCurrency">
					<element_tip>Currency for this machine (for example, JPY).</element_tip>
					<signature>System: LocalCurrency</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Parent">
				<ToolTip>Parent expressions</ToolTip>
				<element name="Parent: BusComp.Field, BusComp.Field">
					<element_tip>Value in parent business component field.  The field in the parent business component must have Link Specification set to TRUE for values to be defaulted.  You can have multiple "BusComp.Field" constructs separated by commas; the list is checked from first to last until a value is found, for example:  Parent: "ServiceRequest.Account", "Account.Name".  NOTE: A space is required after every comma that separates the fields for this function to work correctly.  If the business component has an apostrophe in its name, you must enclose the name in double quotes, for example:  
Parent: "FINS AG Agent Contracts.Status Of Contract".  You can also terminate a chain of Parent calls with a System call, for example:  Parent: "Opportunity.Currency Code", "Account.Currency Code", System: Currency</element_tip>
					<signature>Parent: "BusComp.Field", "BusComp.Field"</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Field">
				<ToolTip>Field expressions</ToolTip>
				<element name="Field: &quot;FieldName&quot;">
					<element_tip>Value in field in current business component field "FieldName".  
Field: "FieldName" does not work in the Predefault Value property if FieldName is a join field.</element_tip>
					<signature>Field: "FieldName"</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Expr">
				<ToolTip>"Expr" expressions</ToolTip>
				<element name="Expr: 'Today() - 1'">
					<element_tip>Value of expression.  Example: "Expr: Today() - 1".</element_tip>
					<signature>Expr: "Today() - 1"</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Profile Attributes">
			<ToolTip>Profile attributes</ToolTip>		
			<subcategory name="All">
				<ToolTip>All attributes</ToolTip>		
				<element name="" appliesTo="Repository Field User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>			
		</category>		
	  <ServiceValidation>
		 <!-- There can be only ONE of each of these elements!!! -->
		 <SyntaxServiceName></SyntaxServiceName>
		 <SyntaxServiceMethod></SyntaxServiceMethod>
	  </ServiceValidation>     
	</ExprBuilderType>         		
	<ExprBuilderType name="Control/ListColumn User Props EB">
		<!-- the name attribute is used to name this button.  Expects: string -->
		<!-- the wrap attribute is used to indicate whether the item to insert,
				when the button is pressed, should enclose the selected text.  This is 
				typical, for example, on a button with text to insert of '[]' (i.e [text]).  
				When pushed the square brackets will wrap the selected text.  When this 
				attribute is true, it is also assumed that the text to insert is at least 
				two characters in length. If wrap is false, the text is simply inserted 
				at the cursor location. Highlighted text will be replaced by the text of
				the button, not wrapped.  
				Expects: true or false -->
		<!-- the order attribute is used to indicate where this button will be placed in
				the toolbar.  Expects: integer -->
		<!-- There can be multiple button nodes.  Each describes a button object. -->
		<Button order="1">
			<Button_Prefix> AND </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical AND</Button_Tip>
			<Button_Text>AND</Button_Text>
		</Button>
		<Button order="2">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> OR </Button_Postfix>
			<Button_Tip>Logical OR</Button_Tip>
			<Button_Text>OR</Button_Text>
		</Button>
		<Button order="3">
			<Button_Prefix> XOR </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical XOR</Button_Tip>
			<Button_Text>XOR</Button_Text>
		</Button>
		<Button order="4">
			<Button_Prefix> NOT </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical NOT</Button_Tip>
			<Button_Text>NOT</Button_Text>
		</Button>
		<Button order="5">
			<Button_Prefix>(</Button_Prefix>
			<Button_Postfix>)</Button_Postfix>
			<Button_Tip>Wraps selected text in parentheses</Button_Tip>
			<Button_Text>(..)</Button_Text>
		</Button>
		<Button order="6">
			<Button_Prefix>"</Button_Prefix>
			<Button_Postfix>"</Button_Postfix>
			<Button_Tip>Wraps selected text in double quotes</Button_Tip>
			<Button_Text>".."</Button_Text>
		</Button>
		<Button order="7">
			<Button_Prefix>'</Button_Prefix>
			<Button_Postfix>'</Button_Postfix>
			<Button_Tip>Wraps selected text in single quotes</Button_Tip>
			<Button_Text>'..'</Button_Text>
		</Button>
		<Button order="8">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> LIKE </Button_Postfix>
			<Button_Tip>LIKE</Button_Tip>
			<Button_Text>LIKE</Button_Text>
		</Button>
		<Button order="9">
			<Button_Prefix> IS </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IS</Button_Tip>
			<Button_Text>IS</Button_Text>
		</Button>
		<Button order="10">
			<Button_Prefix></Button_Prefix>
			<Button_Postfix> NULL </Button_Postfix>
			<Button_Tip>NULL</Button_Tip>
			<Button_Text>NULL</Button_Text>
		</Button>
		<Button order="11">
			<Button_Prefix> IIf </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IIf</Button_Tip>
			<Button_Text>IIf</Button_Text>
		</Button>
		<Button order="12">
			<Button_Prefix> IfNull </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>IfNull</Button_Tip>
			<Button_Text>IfNull</Button_Text>
		</Button>
		<Button order="13">
			<Button_Prefix> + </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Addition</Button_Tip>
			<Button_Text>+</Button_Text>
		</Button>
		<Button order="14">
			<Button_Prefix> - </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Subtraction</Button_Tip>
			<Button_Text>-</Button_Text>
		</Button>
		<Button order="15">
			<Button_Prefix> * </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Multiplication</Button_Tip>
			<Button_Text>*</Button_Text>
		</Button>
		<Button order="16">
			<Button_Prefix> / </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Division</Button_Tip>
			<Button_Text>/</Button_Text>
		</Button>
		<!-- <Button order="17">
			<Button_Prefix> MOD </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Modulus</Button_Tip>
			<Button_Text>MOD</Button_Text>
		</Button>-->
		<Button order="18">
			<Button_Prefix> ^ </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Power</Button_Tip>
			<Button_Text>^</Button_Text>
		</Button>
		<Button order="19">
			<Button_Prefix> &lt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Less Than</Button_Tip>
			<Button_Text>&lt;</Button_Text>
		</Button>
		<Button order="20">
			<Button_Prefix> &gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Greater Than</Button_Tip>
			<Button_Text>&gt;</Button_Text>
		</Button>
		<Button order="21">
			<Button_Prefix> &lt;&gt; </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Not Equal To</Button_Tip>
			<Button_Text>&lt;&gt;</Button_Text>
		</Button>
		<Button order="22">
			<Button_Prefix> = </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Equal To</Button_Tip>
			<Button_Text>=</Button_Text>
		</Button>		
		<Button order="23">
			<Button_Prefix> TRUE </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical True</Button_Tip>
			<Button_Text>TRUE</Button_Text>
		</Button>
		<Button order="24">
			<Button_Prefix> FALSE </Button_Prefix>
			<Button_Postfix></Button_Postfix>
			<Button_Tip>Logical False</Button_Tip>
			<Button_Text>FALSE</Button_Text>
		</Button>						
		<!-- Here is an example of a dynamic category called BC Fields that can be shown
			 on a business component Search Specification field. -->
		<category name="BC Fields">
			<!-- SubCategory can be dynamic (see psp variable maps) -->
			<ToolTip>Business component fields</ToolTip>
			<subcategory name="All" containsFields="true">
				<ToolTip>All Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<!-- An element either has a value attribute or a set of QueryPathSteps
					 that will define it - not both. -->
				<!-- appliesTo is REQUIRED for context sensitive elements (if the 
					 subcategory is not static, i.e for those that contain queryPathSteps 
					 if their subcategory is not dynamically generated)  -->
				<element name="" appliesTo="Repository Control User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository List Column User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>												
			</subcategory>
			<subcategory name="Single Value">
				<ToolTip>Single Value Fields</ToolTip>			
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Control User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository List Column User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Single Value Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Single Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>				
			</subcategory>
			<subcategory name="Multi Value">
				<ToolTip>Multi Value Fields</ToolTip>
				<!-- elements can be dynamic and context sensitive -->
				<!-- Context (which current BC we should query) to be provided by code -->
				<element name="" appliesTo="Repository Control User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository List Column User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Multi Value Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Multi Value Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>				
			</subcategory>
			<subcategory name="Calculated Fields">
				<ToolTip>Calculated Fields</ToolTip>
				<element name="" appliesTo="Repository Control User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>
				<element name="" appliesTo="Repository List Column User Prop">
					<QueryPathStep name="" order="1">
						<BusinessObject>Repository Applet</BusinessObject>
						<BusinessComponent>Repository Applet</BusinessComponent>
						<SearchField>Id</SearchField>
						<SearchValue basedOn="GParent Id"></SearchValue>
						<RetrieveField>Business Component</RetrieveField>
					</QueryPathStep>	
					<QueryPathStep name="" order="2">
						<BusinessObject>Siebel Tools Calculated Field</BusinessObject>
						<BusinessComponent>Siebel Tools Calculated Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue basedOn="QueryPathStep" basedOnValue="1"></SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>
					<element_tip>Calculated Field Name</element_tip>
					<signature></signature>
					<prefix>[</prefix>
					<postfix>]</postfix>
				</element>				
			</subcategory>
		</category>
		<category name="Functions">
			<ToolTip>Functions for Siebel Calculated Expressions.  Can be used in Calculated Field and Validation field expressions.</ToolTip>
			<subcategory name="String">
				<ToolTip>String functions.</ToolTip>
				<element name="InStr">
					<element_tip>Searches for text that is contained within the attribute value for a particular field.  E.g. InStr([Status], "Shipped") will return "Shipped Already" as well as "Already Shipped".&lt;/signature></element_tip>
					<signature>InStr(fieldname, search text).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Len">
					<element_tip>Returns the length of a string or string variable.  E.g. Len([First Name]) returns 5 if First Name is "David".</element_tip>
					<signature>Len(fieldname).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Left">
					<element_tip>Returns the leftmost n characters in the text string or field.  E.g. Left("John", 2) returns "Jo".</element_tip>
					<signature>Left (text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Right">
					<element_tip>Returns the right-most n characters in the text string or field.  E.g. Right ("Adams", 2) returns "ms".</element_tip>
					<signature>Right(text, integer).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Conditional">
				<ToolTip>Conditional Functions</ToolTip>
				<element name="IfNull">
					<element_tip>Returns the value of expression1 unless expression1 is NULL, in which case the value of expression2 is returned.</element_tip>
					<signature>IfNull(expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="IIF">
					<element_tip>If test_expression is TRUE, returns the value of expr1; otherwise returns the value of expr2.  NOTE: If working with DTYPE_NUMBER fields, the Data Type of expr1 determines the Data Type of the resulting value.</element_tip>
					<signature>IIf (test_expression, expression1, expression2).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="LookUp">
				<ToolTip>LookUp functions</ToolTip>
				<element name="Currency">
					<element_tip>Returns the currency code for the current position (for example, USD).</element_tip>
					<signature>Currency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="AccountId">
					<element_tip>Returns the current user's Account ID (OU_ID).</element_tip>
					<signature>AccountID().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ContactLoginId">
					<element_tip>Returns the contact ID of the currently logged in user.  If you do not use the contact login method for a Webbased application, the function cannot retrieve any value and returns an empty string. It is recommended that you use the contact login method and an external security authentication service (for example, LDAP).</element_tip>
					<signature>ContactLoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionId">
					<element_tip>Returns the current user's Division ID (BU_ID).  To limit visibility to employees from the same division as the person logged in, add the following to the search specification property of the Applet:  [Division Id] = DivisionId().</element_tip>
					<signature>DivisionId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="DivisionName">
					<element_tip>Returns the division name of a user who is an employee.  Use to limit visibility to employees from the same division as the person logged in.  Also use to display the division name of the user logging the service request.  Create a new calculated field so that, when the service request is created, the calculated field displays the division name of the current logged user that is creating the service request. Using the following configuration, the new joined field Reported By Division will be predefaulted to this value, and will never receive another value after this service request creation event.  To create a  calculated field that displays the division name of the current logged user creating a service request:  1 In the Service Request business component, create a new calculated field:  Calculated: TRUE; Calculated Value: DivisionName(); Name: Division (Calc); Parent Name: Service Request; Type: DTYPE_TEXT.2 In the Service Request Business Component, also create a new join to S_SRV_REQ_X table:  Column: ATTRIB_03; Join: S_SRV_REQ_X; Name: Reported By Division; Pre Default Value: Field: 'Division Name'; Read Only: TRUE.  Expose the joined field Reported By Division in the relevant applets.  You may also want to expose the calculated field Division (Calc), just to check the logic and set Visible = False later for the control or list column exposed.</element_tip>
					<signature>DivisionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JobTitle">
					<element_tip>Returns the Job Title of the currently logged-in employee.  Similar to PositionId() and DivisionId().</element_tip>
					<signature>JobTitle().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Language">
					<element_tip>Returns the language code (for example, ENU) which is the active client language setting, set by the Language parameter in the CFG file, or by the /L parameter when starting a Siebel application.  NOTE: This is not the Resource Language parameter.</element_tip>
					<signature>Language().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LocalCurrency">
					<element_tip>Returns the currency code for this machine (for example, JPY).</element_tip>
					<signature>LocalCurrency().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginName">
					<element_tip>Returns login name (for example, BSTEVENS).</element_tip>
					<signature>LoginName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LoginId">
					<element_tip>Returns login ID (for example, 0-3241).</element_tip>
					<signature>LoginId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Lookup">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument and the VALUE column matches the value argument.  The function returns the value of the ORDER_BY column for that row.  The primary purpose of the Lookup function is to avoid additional joins in a business component.</element_tip>
					<signature>Lookup(type, value).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupExpr">
					<element_tip>Searches the rows in S_LST_OF_VAL where the TYPE column matches the type argument.  Evaluates the contents of the VALUE column treated as an expression.  Returns the value of the ORDER_BY column for the first row for which the expression evaluates to TRUE.  The LookupExpr function essentially performs an in-memory linear parse evaluate search, so you should  make sure that there are fewer than 30 rows in the LOV type.</element_tip>
					<signature>LookupExpr (type, value_expression).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupName">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language. Returns the language independent code (the CODE column) for the row.  This function is used to obtain the untranslated value in the specified LOV.</element_tip>
					<signature>LookupName (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="LookupValue">
					<element_tip>Finds a row in S_LST_OF_VAL where the TYPE column matches the type argument, the CODE column matches the lang_ind_code argument, and the LANG_ID column matches the language code of the currently active language.  Returns the display value (the VAL column) for the row.  LookupValue tries to find the display value for the specified lang_ind_code.  If not found,  lookupValue just returns the lang_ind_code itself as the value.  This function is used to obtain the translation of the specified untranslated value in the specified LOV into the currently active language.  NOTE: The LookupValue() function cannot be used directly in the Pre Default Value property of a field.  Instead, use a separate calculated field for the lookup, and reference the calculated field in the Pre Default.</element_tip>
					<signature>LookupValue (type, language_independent_code)</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationId">
					<element_tip>Returns the organization ID of the currently logged in user.</element_tip>
					<signature>OrganizationId().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="OrganizationName">
					<element_tip>Returns the organization name of a user who is an employee.</element_tip>
					<signature>OrganizationName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionName">
					<element_tip>Returns Position Name of currently logged-in employee.</element_tip>
					<signature>PositionName().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="PositionId">
					<element_tip>Returns Position ID of currently logged-in employee (for example, 0-4432).</element_tip>
					<signature>PositionId(().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentBCName">
					<element_tip>Parent (master) business component name for active link (for example, Opportunity).</element_tip>
					<signature>ParentBCName(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ParentFieldValue">
					<element_tip>Returns the value of the field_name field in the parent business component.  The result is not typed correctly but is always of type String.  Also, the result does not change if the parent row is updated.  The parent business component field must be exported by using Link Specification = TRUE.</element_tip>
					<signature>ParentFieldValue(field_name).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Invocation">
				<ToolTip>Invocation functions</ToolTip>
				<element name="InvokeServiceMethod">
					<element_tip>Invokes a business service from a calculated field and returns [Output Prop].  NOTE: Do not expose a calculated expression that invokes a business service in a list applet.  Doing so may result in poor performance because the business service will be repeatedly instantiated each time the field appears in the list.</element_tip>
					<signature>InvokeServiceMethodInvokeServiceMethod("[ServiceName]","[MethodName]","[InputProp1=val1,InputProp2=val2","[OutputProp]").</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Math">
				<ToolTip>Math functions</ToolTip>
				<element name="Count">
					<element_tip>Returns the number of rows in the multi-value group defined by the MVL mvlink.</element_tip>
					<signature>Count(mvlink).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="RowIdToRowIdNum">
					<element_tip>Converts an alphanumeric row ID to a unique, pure numeric row ID in the Service Request business component.  In Siebel eBusiness 6.x, this expression has changed functionality; it is used for the predefault value of the "SR Number" field.</element_tip>
					<signature>RowIdToRowIdNum (Id).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Sum">
					<element_tip>Sums the values from a field in child records into a field in a parent record.  The child record being summed from must be defined as a multivalue field that is part of a multi-value group that is associated with the business component of the field being summed to.</element_tip>
					<signature>Sum (mvfield).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="ToChar">
					<element_tip>Returns a string that represents a number or date in a format specified by the optional format parameter.  (For example, ToChar (10, "##.##") returns "10.00").</element_tip>
					<signature>ToChar (number_expression, format).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Date/Time">
				<ToolTip>Date &amp; Time Functions.</ToolTip>
				<element name="JulianDay">
					<element_tip>Equal to the Oracle (and Sagent) Julian Day, for all dates in the 20th and 21st centuries.</element_tip>
					<signature>JulianDay().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianMonth">
					<element_tip>Equal to the JulianYear() * 12 + currentMonth, where January = 1.</element_tip>
					<signature>JulianMonth().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianQtr">
					<element_tip>Equal to the JulianYear() * 4 + currentQuarter, where currentQuarter = (currentMonth - 1) / 3 + 1 rounded down to the next integer.</element_tip>
					<signature>JulianQtr().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianWeek">
					<element_tip>JulianDay() / 7, rounded down to the next integer.</element_tip>
					<signature>JulianWeek().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="JulianYear">
					<element_tip>Equal to the current year + 4713.</element_tip>
					<signature>JulianYear().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="TimeStamp">
					<element_tip>Today's date and time (for example, 01/02/96 11:15:22).  The Timestamp function can also be used in queries.  For example:  Created >= Timestamp() - 0.  Against an MS SQL Server database would return those records created within the last one-tenth of a day.</element_tip>
					<signature>TimeStamp().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
				<element name="Today">
					<element_tip>Today's date (for example, 1/26/96, which is January 26, 1996 for the U.S. locale).</element_tip>
					<signature>Today().</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
			<subcategory name="Profile">
				<ToolTip>Profile functions</ToolTip>
				<element name="GetProfileAttr">
					<element_tip>Returns the value stored in the profile attribute if that attribute has been defined. Used in personalization to retrieve values of attributes in a user profile and to pass information from a script to the UI.  Set a session-specific personalization attribute equal to the value of the shared global and reference the personalization attribute in a calculated field.  NOTE: For an undefined attribute or for an attribute that has not been set up, GetProfileAttr returns NULL.  This is important when you are using comparison operators.  For example:  1) GetProfileAttr (Attribute) = "" always returns FALSE either if the Attribute does not exist or exists and the value is different than "".  2) GetProfileAttr (Attribute) IS NULL returns TRUE if the Attribute does not exist and FALSE otherwise.</element_tip>
					<signature>GetProfileAttribute(Attribute).</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Keywords">
			<ToolTip>Keywords.</ToolTip>
			<subcategory name="General keywords">
				<ToolTip>General keywords</ToolTip>
				<element name="EXISTS">
					<element_tip/>
					<signature>EXISTS</signature>
					<prefix/>
					<postfix>()</postfix>
				</element>
			</subcategory>
		</category>
		<category name="Operators">
			<ToolTip>Operators for expressions</ToolTip>
			<subcategory name="Arithmetic">
				<ToolTip>Arithmetic operators</ToolTip>
				<element name="-">
					<element_tip>Subtraction</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="^">
					<element_tip>Power</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="+">
					<element_tip>Addition</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="*">
					<element_tip>Multiplication</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="/">
					<element_tip>Division</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<!-- <element name="Mod">
					<element_tip>"A Mod B"  returns the integer remainder of "A / B".  For example, "17 Mod 5" returns 2.</element_tip>
					<signature>Modulus.  Example:  A Mod B.</signature>
					<prefix/>
					<postfix/>
				</element>-->
			</subcategory>
			<subcategory name="Comparison">
				<ToolTip>Comparison Operators</ToolTip>
				<element name="=">
					<element_tip>Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;">
					<element_tip>Less Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;">
					<element_tip>Greater Than</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;&gt;">
					<element_tip>Not Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&lt;=">
					<element_tip>Less Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="&gt;=">
					<element_tip>Greater Than Or Equal To</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NULL">
					<element_tip>Returns TRUE if NULL</element_tip>
					<signature>Is null.  Example:  expression IS NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="IS NOT NULL">
					<element_tip>Returns TRUE if not NULL</element_tip>
					<signature>Is not null.  Example:  expression IS NOT NULL.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Concatenation">
				<ToolTip>String concatenation operators</ToolTip>
				<element name="+">
					<element_tip>Concatenates n strings.  For example "string1" + "string2" + "string3" results in "string1string2string3".</element_tip>
					<signature>String concatenation.  Example:  "string1" + "string2".</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Logical">
				<ToolTip>Logical Operators</ToolTip>
				<element name="AND">
					<element_tip>Returns TRUE if all argument expressions evaluate to TRUE.</element_tip>
					<signature>Logical AND.  Example:  a AND b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="OR">
					<element_tip>Returns TRUE unless both expressions a and b evaluate to false.</element_tip>
					<signature>Logical OR.  Example:  a OR b.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT">
					<element_tip>Returns TRUE if a evaluates to FALSE.</element_tip>
					<signature>Logical NOT.  Example:  NOT a.</signature>
					<prefix/>
					<postfix/>
				</element>
				<element name="XOR">
					<element_tip>Exclusive or.  Returns FALSE if both a and b are false or if a and b are both TRUE.  That is, returns true when exactly one of a or b evaluates to TRUE.</element_tip>
					<signature>Logical XOR.  Example:  a XOR b.</signature>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
			<subcategory name="Other">
				<element name="LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="NOT LIKE">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="EXISTS">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Wildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="SingleCharWildcard">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="Is">
					<element_tip/>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
			</subcategory>
		</category>
		<category name="Profile Attributes">
			<ToolTip>Profile attributes</ToolTip>		
			<subcategory name="All">
				<ToolTip>All attributes</ToolTip>		
				<element name="" appliesTo="Repository Control User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>
				<element name="" appliesTo="Repository List Column User Prop">
					<QueryPathStep name="" order="1" useNewObj="true">
						<BusinessObject>Repository Business Component</BusinessObject>
						<BusinessComponent>Repository Field</BusinessComponent>
						<SearchField>Parent Name</SearchField>
						<SearchValue>Personalization Profile</SearchValue>
						<RetrieveField>Name</RetrieveField>
					</QueryPathStep>				
					<element_tip>Profile attribute</element_tip>
					<signature/>
					<prefix/>
					<postfix/>
				</element>				
			</subcategory>			
	    </category>
	  <ServiceValidation>
		 <!-- There can be only ONE of each of these elements!!! -->
		 <SyntaxServiceName></SyntaxServiceName>
		 <SyntaxServiceMethod></SyntaxServiceMethod>
	  </ServiceValidation>     
	</ExprBuilderType>		
</Expression_Builder>
